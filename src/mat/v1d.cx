package v1d

import "mat"

// Constants ...
var MAX f64 =  10000000000000.0D // ##0 fixme
var MIN f64 = -10000000000000.0D

// min ...
func min(a f64, b f64) (out f64) {
	//panicIf(f64.isnan(a), "NAN min #0")
	//panicIf(f64.isnan(b), "NAN min #1")
	out = a
	if b < a {
		out = b
	}
	//panicIf(f64.isnan(out), "NAN min")
}

// max ...
func max(a f64, b f64) (out f64) {
	//panicIf(f64.isnan(a), "NAN max #0")
	//panicIf(f64.isnan(b), "NAN max #1")
	out = a
	if b > a {
		out = b
	}
	//panicIf(f64.isnan(out), "NAN max")
}


// clamp ...
func clamp(a f64, fmin f64, fmax f64) (out f64) {
	//panicIf(f64.isnan(a), "NAN clamp #0")
	//panicIf(f64.isnan(fmin), "NAN clamp #1")
	//panicIf(f64.isnan(fmax), "NAN clamp #2")
	out = f64.max(fmin, f64.min(a, fmax))
	//panicIf(f64.isnan(out), "NAN clamp")
}

// sat ...
func sat(a f64) (out f64) {
	//panicIf(f64.isnan(a), "NAN sat #0")
	out = f64.max(0.0D, f64.min(1.0D, a))
	//panicIf(f64.isnan(out), "NAN sat")
}

// lerp ...
func lerp(a f64, b f64, t f64) (out f64) {
	out = a * (1.0D - t) + b * t
	//panicIf(f64.isnan(out), "NAN lerp")
}

// lerpsat ...
func lerpsat(a f64, b f64, t f64) (out f64) {
	t = f64.max(0.0D, f64.min(1.0D, t))
	var nt f64 = f64.max(0.0D, f64.min(1.0D, 1.0D - t))
	out = a * nt + b * t
	//panicIf(f64.isnan(out), "NAN lerpsat")
}

