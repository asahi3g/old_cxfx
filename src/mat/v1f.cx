package v1

import "mat"

// Constants ...
var MAX f32 =  1000000000.0
var MIN f32 = -1000000000.0
var PI f32 = 3.14159265358979323846264338327950288
var _2PI f32 = 2.0 * PI

// min ...
func min(a f32, b f32) (out f32) {
	//panicIf(f32.isnan(a), "NAN min #0")
	//panicIf(f32.isnan(b), "NAN min #1")
	out = a
	if b < a {
		out = b
	}
	//panicIf(f32.isnan(out), "NAN min")
}

// max ...
func max(a f32, b f32) (out f32) {
	//panicIf(f32.isnan(a), "NAN max #0")
	//panicIf(f32.isnan(b), "NAN max #1")
	out = a
	if b > a {
		out = b
	}
	//panicIf(f32.isnan(out), "NAN max")
}


// clamp ...
func clamp(a f32, fmin f32, fmax f32) (out f32) {
	//panicIf(f32.isnan(a), "NAN clamp #0")
	//panicIf(f32.isnan(fmin), "NAN clamp #1")
	//panicIf(f32.isnan(fmax), "NAN clamp #2")
	out = f32.max(fmin, f32.min(a, fmax))
	//panicIf(f32.isnan(out), "NAN clamp")
}

// sat ...
func sat(a f32) (out f32) {
	//panicIf(f32.isnan(a), "NAN sat #0")
	out = f32.max(0.0, f32.min(1.0, a))
	//panicIf(f32.isnan(out), "NAN sat")
}

// lerp ...
func lerp(a f32, b f32, t f32) (out f32) {
	out = a * (1.0 - t) + b * t
	//panicIf(f32.isnan(out), "NAN lerp")
}

// lerpsat ...
func lerpsat(a f32, b f32, t f32) (out f32) {
	t = f32.max(0.0, f32.min(1.0, t))
	var nt f32 = f32.max(0.0, f32.min(1.0, 1.0 - t))
	out = a * nt + b * t
	//panicIf(f32.isnan(out), "NAN lerpsat")
}

// srand ...
func srand() (out f32) {
	out = f32.rand() * 2.0 - 1.0
	//panicIf(f32.isnan(out), "NAN srand")
}

