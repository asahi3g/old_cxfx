//-----------------------------------------------------------------------------
// math
//-----------------------------------------------------------------------------
package mat

// TODO : replace dummy constants
// TODO : massive cleanup...
//
//-----------------------------------------------------------------------------
// float64
//-----------------------------------------------------------------------------
var F64_MAX f64 =  10000000000000.0D // ##0 fixme
var F64_MIN f64 = -10000000000000.0D

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func min_f64(a f64, b f64) (out f64) {
	out = a
	if (b < a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func max_f64(a f64, b f64) (out f64) {
	out = a
	if (b > a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
// float32
//-----------------------------------------------------------------------------
var FLOAT_MAX f32 =  1000000000.0 // ##0 fixme
var FLOAT_MIN f32 = -1000000000.0

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func min(a f32, b f32) (out f32) {
	out = a
	if (b < a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func max(a f32, b f32) (out f32) {
	out = a
	if (b > a) {
		out = b
	}
}

//-----------------------------------------------------------------------------
// vec2
//-----------------------------------------------------------------------------
type v2 struct {
	x f32
	y f32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_isnan(v v2) (out bool) {
	out = f32.isnan(v.x) || f32.isnan(v.y)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_(x f32, y f32) (out v2) {
	out.x = x
	out.y = y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
var v2_zero v2 = v2_(0.0, 0.0)
var v2_one  v2 = v2_(1.0, 1.0)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_min(a v2, b v2) (out v2) {
	out = v2_(min(a.x, b.x), min(a.y, b.y))
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_add(a v2, b v2) (out v2) {
	out.x = a.x + b.x
	out.y = a.y + b.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_sub(a v2, b v2) (out v2) {
	out.x = a.x - b.x
	out.y = a.y - b.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_mul(a v2, b v2) (out v2) {
	out.x = a.x * b.x
	out.y = a.y * b.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v2_div(a v2, b v2) (out v2) {
	out.x = a.x / b.x
	out.y = a.y / b.y
}

//-----------------------------------------------------------------------------
// vec3
//-----------------------------------------------------------------------------
type v3 struct {
	x f32
	y f32
	z f32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v3_(x f32, y f32, z f32) (out v3) {
	out.x = x
	out.y = y
	out.z = z
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v3_add(a v3, b v3) (out v3) {
	out.x = a.x + b.x
	out.y = a.y + b.y
	out.z = a.z + b.z
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v3_mulf(a v3, f f32) (out v3) {
	out.x = a.x * f
	out.y = a.y * f
	out.z = a.z * f
}

//-----------------------------------------------------------------------------
// vec4
//-----------------------------------------------------------------------------
type v4 struct {
	x f32
	y f32
	z f32
	w f32
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_(x f32, y f32, z f32, w f32) (out v4) {
	out.x = x
	out.y = y
	out.z = z
	out.w = w
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
var v4_zero v4 = v4_(0.0, 0.0, 0.0, 0.0)

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_v2v2(xy v2, zw v2) (out v4) {
	out.x = xy.x
	out.y = xy.y
	out.z = zw.x
	out.w = zw.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_xy(in v4) (out v2) {
	out.x = in.x
	out.y = in.y
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_zw(in v4) (out v2) {
	out.x = in.z
	out.y = in.w
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_mul(a v4, b v4) (out v4) {
	out.x = a.x * b.x
	out.y = a.y * b.y
	out.z = a.z * b.z
	out.w = a.w * b.w
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func v4_mix(a v4, b v4, t f32) (out v4) {
	out.x = a.x + t * (b.x - a.x)
	out.y = a.y + t * (b.y - a.y)
	out.z = a.z + t * (b.z - a.z)
	out.w = a.w + t * (b.w - a.w)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func rgba_ui8(x i32, y i32, z i32, w i32) (out v4) {
	out.x = i32.f32(x) / 255.0
	out.y = i32.f32(y) / 255.0
	out.z = i32.f32(z) / 255.0
	out.w = i32.f32(w) / 255.0
}

// Transpose ...
func Transpose(in []f32) (out []f32) { // ISSUE : if named Identity
//	github.com/skycoin/cx/cxgo/actions.FunctionAddParameters(0xc42073e840, 0xc42000ed60, 0x1, 0x1, 0xc42000ed68, 0x1, 0x1)
//	/go/src/github.com/skycoin/cx/cxgo/actions/functions.go:59 +0x166

	var m00 f32 = in[0]
	var m01 f32 = in[1]
	var m02 f32 = in[2]
	var m03 f32 = in[3]

	var m10 f32 = in[4]
	var m11 f32 = in[5]
	var m12 f32 = in[6]
	var m13 f32 = in[7]

	var m20 f32 = in[8]
	var m21 f32 = in[9]
	var m22 f32 = in[10]
	var m23 f32 = in[11]

	var m30 f32 = in[12]
	var m31 f32 = in[13]
	var m32 f32 = in[14]
	var m33 f32 = in[15]

	out[0] = m00
	out[1] = m10
	out[2] = m20
	out[3] = m30

	out[4] = m01
	out[5] = m11
	out[6] = m21
	out[7] = m31

	out[8] = m02
	out[9] = m12
	out[10] = m22
	out[11] = m32

	out[12] = m03
	out[13] = m13
	out[14] = m23
	out[15] = m33
}

// Identity ...
func Identity(in []f32) (out []f32) {
	out = in

	out = append(out, 1.0)
	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 1.0)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 1.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 1.0)
}

// PrintMatrix
func PrintMatrix(in []f32) {
	for i := 0; i < len(in); i++ {
		printf("%f, ", in[i])
	}
	printf("\n")
}

// ProjectionMatrix ...
func ProjectionMatrix(in []f32, near f32, far f32, fov f32, width f32, height f32) (out []f32) {
	out = in

	var ratio f32 = height / width
	var m00 f32 = f32.cos(fov) / f32.sin(fov);

	out = append(out, m00)
	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, m00 / ratio)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, (0.0 - far - near) / (far - near))
	out = append(out, -1.0)

	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, (0.0 - 2.0 * near * far) / (far - near))
	out = append(out, 0.0)
}

// Translate ...
func Translate(in []f32, x f32, y f32, z f32) (out []f32) {
	out = in

	out = append(out, 1.0)
	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 1.0)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 1.0)
	out = append(out, 0.0)

	out = append(out, x)
	out = append(out, y)
	out = append(out, z)
	out = append(out, 1.0)
}

// Rotate ...
func Rotate(in[] f32, x f32, y f32, z f32) (out []f32) {
	out = Identity(in)
}

// RotationX ...
func RotationX(in []f32, alpha f32) (out []f32) {
	out = in

	var cosA f32 = f32.cos(alpha)
	var sinA f32 = f32.sin(alpha)

	out = append(out, 1.0)
	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, cosA)
	out = append(out, sinA)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, -sinA)
	out = append(out, cosA)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 1.0)
}

// RotationY ...
func RotationY(in []f32, alpha f32) (out []f32) {
	out = in

	var cosA f32 = f32.cos(alpha)
	var sinA f32 = f32.sin(alpha)

	out = append(out, cosA)
	out = append(out, 0.0)
	out = append(out, sinA)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 1.0)
	out = append(out, 0.0)
	out = append(out, 0.0)

	out = append(out, -sinA)
	out = append(out, 0.0)
	out = append(out, cosA)
	out = append(out, 0.0)

	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 0.0)
	out = append(out, 1.0)
}

// Mutliply ...
func Multiply(in []f32, a []f32, b []f32) (out []f32) {
	var m11 f32 = a[ 0] * b[0] + a[ 1] * b[4] + a[ 2] * b[ 8] + a[ 3] * b[12]
	var m12 f32 = a[ 0] * b[1] + a[ 1] * b[5] + a[ 2] * b[ 9] + a[ 3] * b[13]
	var m13 f32 = a[ 0] * b[2] + a[ 1] * b[6] + a[ 2] * b[10] + a[ 3] * b[14]
	var m14 f32 = a[ 0] * b[3] + a[ 1] * b[7] + a[ 2] * b[11] + a[ 3] * b[15]
	var m21 f32 = a[ 4] * b[0] + a[ 5] * b[4] + a[ 6] * b[ 8] + a[ 7] * b[12]
	var m22 f32 = a[ 4] * b[1] + a[ 5] * b[5] + a[ 6] * b[ 9] + a[ 7] * b[13]
	var m23 f32 = a[ 4] * b[2] + a[ 5] * b[6] + a[ 6] * b[10] + a[ 7] * b[14]
	var m24 f32 = a[ 4] * b[3] + a[ 5] * b[7] + a[ 6] * b[11] + a[ 7] * b[15]
	var m31 f32 = a[ 8] * b[0] + a[ 9] * b[4] + a[10] * b[ 8] + a[11] * b[12]
	var m32 f32 = a[ 8] * b[1] + a[ 9] * b[5] + a[10] * b[ 9] + a[11] * b[13]
	var m33 f32 = a[ 8] * b[2] + a[ 9] * b[6] + a[10] * b[10] + a[11] * b[14]
	var m34 f32 = a[ 8] * b[3] + a[ 9] * b[7] + a[10] * b[11] + a[11] * b[15]
	var m41 f32 = a[12] * b[0] + a[13] * b[4] + a[14] * b[ 8] + a[15] * b[12]
	var m42 f32 = a[12] * b[1] + a[13] * b[5] + a[14] * b[ 9] + a[15] * b[13]
	var m43 f32 = a[12] * b[2] + a[13] * b[6] + a[14] * b[10] + a[15] * b[14]
	var m44 f32 = a[12] * b[3] + a[13] * b[7] + a[14] * b[11] + a[15] * b[15]

	out = in
	out = append(out, m11)
	out = append(out, m12)
	out = append(out, m13)
	out = append(out, m14)

	out = append(out, m21)
	out = append(out, m22)
	out = append(out, m23)
	out = append(out, m24)

	out = append(out, m31)
	out = append(out, m32)
	out = append(out, m33)
	out = append(out, m34)

	out = append(out, m41)
	out = append(out, m42)
	out = append(out, m43)
	out = append(out, m44)
}

var matrixScratch0 []f32
var matrixScratch1 []f32

// MatrixStackLast ...
func MatrixStackLast(stack []f32) (out []f32) {
	var stackLen i32 = len(stack) - 16
	panicIf((stackLen % 16) != 0, "")
	panicIf((stackLen < 0), "")
	matrixScratch0 = resize(matrixScratch0, 16)
	matrixScratch0[ 0] = stack[stackLen +  0]
	matrixScratch0[ 1] = stack[stackLen +  1]
	matrixScratch0[ 2] = stack[stackLen +  2]
	matrixScratch0[ 3] = stack[stackLen +  3]
	matrixScratch0[ 4] = stack[stackLen +  4]
	matrixScratch0[ 5] = stack[stackLen +  5]
	matrixScratch0[ 6] = stack[stackLen +  6]
	matrixScratch0[ 7] = stack[stackLen +  7]
	matrixScratch0[ 8] = stack[stackLen +  8]
	matrixScratch0[ 9] = stack[stackLen +  9]
	matrixScratch0[10] = stack[stackLen + 10]
	matrixScratch0[11] = stack[stackLen + 11]
	matrixScratch0[12] = stack[stackLen + 12]
	matrixScratch0[13] = stack[stackLen + 13]
	matrixScratch0[14] = stack[stackLen + 14]
	matrixScratch0[15] = stack[stackLen + 15]
	out = matrixScratch0
}

// MatrixStackPush ...
func MatrixStackPush(stack []f32, matrix []f32) (out []f32) {
	var stackLen i32 = len(stack)
	panicIf((stackLen % 16) != 0, "")
	panicIf((len(matrix) % 16) != 0, "")
	panicIf(len(matrix) < 16, "")
	var tmp []f32
	if stackLen >= 16 {
		matrixScratch0 = MatrixStackLast(stack)
		//printf("RIGHT\n")//, ISSUE : can use , here : printf is not executed
		//PrintMatrix(matrix)
		matrixScratch1 = resize(matrixScratch1, 0)
		matrixScratch1 = Multiply(matrixScratch1, matrixScratch0, matrix)
		tmp = matrixScratch1
		//tmp = matrix
	} else {
		tmp = matrix
	}

	stack = resize(stack, stackLen + 16)
   stack[stackLen +  0] = tmp[ 0]
   stack[stackLen +  1] = tmp[ 1]
   stack[stackLen +  2] = tmp[ 2]
   stack[stackLen +  3] = tmp[ 3]
   stack[stackLen +  4] = tmp[ 4]
   stack[stackLen +  5] = tmp[ 5]
   stack[stackLen +  6] = tmp[ 6]
   stack[stackLen +  7] = tmp[ 7]
   stack[stackLen +  8] = tmp[ 8]
   stack[stackLen +  9] = tmp[ 9]
   stack[stackLen + 10] = tmp[10]
   stack[stackLen + 11] = tmp[11]
   stack[stackLen + 12] = tmp[12]
   stack[stackLen + 13] = tmp[13]
   stack[stackLen + 14] = tmp[14]
   stack[stackLen + 15] = tmp[15]
   out = stack
}

// MatrixStackPop ...
func MatrixStackPop(stack []f32, count i32) (out []f32) {
	var stackLen i32 = len(stack)
	panicIf((stackLen % 16) != 0, "")
	panicIf((stackLen / 16) < count, "")
	stack = resize(stack, stackLen - count * 16)
	out = stack
}




