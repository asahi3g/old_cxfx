package gfx

import "gltf"

// Globals ...
var g_models []Model

// ModelId ...
type ModelId struct {
	model i32
}

// Model ...
type Model struct {
	stack []i32
	asset gltf.AssetId
	meshes []MeshId
	baseTextures []TextureId
	metalRoughTextures []TextureId
	world []f32
	view []f32 // TODO : remove
	projection []f32 // TODO : remove
	color []f32
	dataDir str
	filename str
	matrixStack []f32
	identity []f32 // TODO : remove
	tmp []f32 // TODO : remove
	environmentSpecular TextureId
	environmentDiffuse TextureId
	brdf TextureId
	cameraPosition []f32

	meshCacheKey []i32
	meshCacheVal []MeshId
}

// ModelIsValid ...
func ModelIsValid(id ModelId) (out bool) {
	out = id.model >= 0 && id.model < len(g_models)
}

// ModelCreateFromFile ...
func ModelCreateFromFile(dataDir str, filename str) (out ModelId){
	out.model = len(g_models)

	var model Model
	model.color = resize(model.color, 4)
	model.color[0] = 1.0
	model.color[1] = 0.0
	model.color[2] = 1.0
	model.color[3] = 1.0
	model.dataDir = dataDir
	model.filename = filename
	model.asset = gltf.AssetCreate(dataDir, filename)
	var identity []f32 = mat.MatrixAlloc()
	identity = mat.MatrixIdentity(identity)
	model.identity = identity

	var tmp []f32 = mat.MatrixAlloc()
	model.tmp = tmp

	var world []f32 = mat.MatrixAlloc()
	model.world = world

	var view []f32 = mat.MatrixAlloc()
	model.view = view

	var projection []f32 = mat.MatrixAlloc()
	model.projection = projection

	gltf.AssetPrint(model.asset)
	g_models = append(g_models, model)
}

type channelInfo struct {
	count i32
	data []f32
	dataLen i32
}

func meshInstance(id gltf.AssetId, primitive gltf.Primitive) (out MeshId) {
	var mode i32
	printf("instancing : mode %d, indices %d, material %d\n", primitive.mode, primitive.indices, primitive.material)
	if primitive.mode == gltf.PRIMITIVE_LINES {
		mode = gl.LINES
	} else if primitive.mode == gltf.PRIMITIVE_TRIANGLES {
		mode = gl.TRIANGLES
	} else {
		printf("primitive type not implemented\n")
		out = InvalidMesh()
		return
	}

	// attributes
	var channels []channelInfo
	var attributes []VertexAttribute
	var vertexCount i32 = 0
	var attributeCount i32 = len(primitive.attributes)
	var byteStride i32 = 0
	var componentStride i32 = 0
	for a := 0; a < attributeCount; a++ {
		var accessor gltf.Accessor = gltf.AssetGetAccessor(id, primitive.attributes[a].accessor)
		if a > 0 && accessor.count != vertexCount {
			printf("wrong number of vectices\n")
			out = InvalidMesh()
			return
		}

		vertexCount = accessor.count
		if accessor.componentType != gl.FLOAT { // TODO : how to pass []struct to BufferData ?
			printf("buffer type not implemented\n")
			out = InvalidMesh()
			return
		}

		var attribute VertexAttribute
		attribute.componentCount = accessor.componentCount
		attribute.componentType = gl.FLOAT // TODO : handle non float attributes
		attribute.componentByteSize = g_sizeofFloat // TODO handle non float attributes
		attribute.componentOffset = componentStride
		attribute.byteOffset = byteStride

		var attributeType i32 = primitive.attributes[a].attributeType
		var binding i32 = -1
		if attributeType == gltf.ATTRIBUTE_POSITION {
			binding = BIND_POSITION
		} else if attributeType == gltf.ATTRIBUTE_NORMAL {
			binding = BIND_NORMAL
		} else if attributeType == gltf.ATTRIBUTE_COLOR {
			binding = BIND_COLOR
		} else if attributeType == gltf.ATTRIBUTE_TEXCOORD {
			binding = BIND_TEXCOORD
		} else if attributeType == gltf.ATTRIBUTE_TANGENT {
			binding = BIND_TANGENT
		}

		attribute.binding = binding

		attributes = append(attributes, attribute)

		var channel channelInfo
		channel.data = accessor.dataF32
		channel.dataLen = len(channel.data)
		channel.count = attribute.componentCount

		channels = append(channels, channel)
		byteStride = byteStride + attribute.componentCount * attribute.componentByteSize
		componentStride = componentStride + attribute.componentCount
	}

	var vertexLen i32 = componentStride * vertexCount
	if vertexLen <= 0 {
		printf("invalid vertex buffer\n")
		out = InvalidMesh()
		return
	}

	// vertices
	var vertices []f32 // TODO : test perf with loop reordering + resize(vertices, vertexLen)
	for v := 0; v < vertexCount; v++ {
		for c := 0; c < attributeCount; c++ {
			var data []f32 = channels[c].data
			var dataLen i32 = channels[c].dataLen
			var count i32 = channels[c].count
			for i := 0; i < count; i++ {
				vertices = append(vertices, data[v * count + i])
			}
		}
	}

	// indices
	var indices []ui32
	var indicesAccessor gltf.Accessor = gltf.AssetGetAccessor(id, primitive.indices)
	var indicesType i32 = indicesAccessor.componentType
	if indicesAccessor.componentCount != 1 ||
	   (indicesAccessor.componentType != gl.UNSIGNED_SHORT && indicesAccessor.componentType != gl.UNSIGNED_INT) ||
	   indicesAccessor.attributeTypeEnum != gltf.TYPE_SCALAR {
		printf("invalid index buffer format : componentCount %d, componentType %d, attributeType %d\n",
			indicesAccessor.componentCount, indicesAccessor.componentType, indicesAccessor.attributeTypeEnum)
		out = InvalidMesh()
		return
	}

	if indicesType == gl.UNSIGNED_SHORT { // TODO : use unsigned short indices
		/*var indicesUI16 []ui16 = indicesAccessor.dataUI16
		var indexCount i32 = len(indicesUI16)
		for i := 0; i < indexCount; i++ {
			indices = append(indices, ui16.ui32(indicesUI16))
		}*/
		indices = indicesAccessor.dataUI32
	} else if indicesType == gl.UNSIGNED_INT {
		indices = indicesAccessor.dataUI32
	} else {
		printf("invalid index buffer type\n")
		out = InvalidMesh()
		return
	}

	printf("meshInstance %d, %d, %d\n", len(attributes), len(indices), len(vertices))
	if len(attributes) > 0 && len(indices) > 0 && len(vertices) > 0 {
		var nullIndices []ui32
		var nullVertices []f32
		out = MeshCreate(mode, attributes, len(indices), len(vertices))
		MeshBegin(out) // TODO : remove MeshBegin/MeshEnd, data should be uploaded with BufferData in MeshInstance.
		g_meshes[out.mesh].vertices = vertices
		g_meshes[out.mesh].indices = indices
		MeshEnd(out)
	}
}

// ModelSetCameraPosition ...
func ModelSetCameraPosition(id ModelId, position mat.v3) {
	panicIfNot(ModelIsValid(id), "invalid model")
	var cameraPosition []f32 = g_models[id.model].cameraPosition
	cameraPosition = resize(cameraPosition, 4)
	cameraPosition[0] = position.x
	cameraPosition[1] = position.y
	cameraPosition[2] = position.z
	cameraPosition[3] = 1.0
	g_models[id.model].cameraPosition = cameraPosition
}


// ModelSetEnvironmentSpecular ...
func ModelSetEnvironmentSpecular(id ModelId, environment TextureId) { 
	panicIfNot(ModelIsValid(id), "invalid model")
	g_models[id.model].environmentSpecular = environment
}

// ModelSetEnvironmentDiffuse...
func ModelSetEnvironmentDiffuse(id ModelId, environment TextureId) { 
	panicIfNot(ModelIsValid(id), "invalid model")
	g_models[id.model].environmentDiffuse = environment
}

// ModelSetBRDF ...
func ModelSetBRDF(id ModelId, brdf TextureId) {
	panicIfNot(ModelIsValid(id), "invalid model")
	g_models[id.model].brdf = brdf
}

// ModelSetWorld ...
func ModelSetWorld(id ModelId, world []f32) {
	panicIfNot(ModelIsValid(id), "invalid model")
	var i i32 = copy(g_models[id.model].world, world)
}

// ModelSetView ...
func ModelSetView(id ModelId, view []f32) {
	panicIfNot(ModelIsValid(id), "invalid model")
	var i i32 = copy(g_models[id.model].view, view)
}

// ModelSetProjection ...
func ModelSetProjection(id ModelId, projection []f32) {
	panicIfNot(ModelIsValid(id), "invalid model")
	var i i32 = copy(g_models[id.model].projection, projection)
}

func loadTexture(asset AssetId, dataDir str, index i32) (out TextureId) {
	out = InvalidTexture()
	//if gltf.AssetIsValidTexture(asset, index) {
		var texture gltf.Texture = gltf.AssetGetTexture(asset, index)
		var image gltf.Image = gltf.AssetGetImage(asset, texture.source)
		if image.uri != "" {
			//printf("LOAD---------------------------- INDEX %d, %s\n", index, image.uri)
			out = TextureCreate(sprintf("%s%s", dataDir, image.uri), FORMAT_R8_G8_B8_A8, 0, 0, -1, false)
		}
	//}
}

// ModelRender ...
func ModelRender(id ModelId, alpha bool) {
	panicIfNot(ModelIsValid(id), "invalid model")

	var asset gltf.AssetId = g_models[id.model].asset
	var roots []i32 = gltf.AssetGetRootNodes(asset)
	var rootCount i32 = len(roots)
	var stack []i32 = resize(g_models[id.model].stack, rootCount)
	var matrixStack []f32 = g_models[id.model].matrixStack//, rootCount * 16)
	matrixStack = resize(matrixStack, 0)

	for i := 0; i < rootCount; i++ {
		stack[i] = roots[i]
	}

	var m i32
	var identity []f32 = g_models[id.model].identity
	matrixStack = mat.MatrixStackPush(matrixStack, identity)
	for len(stack) > 0 {
		var stackLen i32 = len(stack)

		stackLen--
		var node i32 = stack[stackLen]
		stack = resize(stack, stackLen)
		if node < 0 {
			matrixStack = mat.MatrixStackPop(matrixStack, 1)
		} else {
			var nodeMatrix []f32 = gltf.NodeGetMatrix(asset, node)
			if len(nodeMatrix) <= 0 {
				nodeMatrix = mat.MatrixAlloc()
				nodeMatrix = mat.MatrixIdentity(nodeMatrix)
			}

			//mat.MatrixPrint("NODE_MATRIX :", nodeMatrix)

			matrixStack = mat.MatrixStackPush(matrixStack, nodeMatrix)

			var mesh i32 = gltf.NodeGetMesh(asset, node)
			var primitives []gltf.Primitive = gltf.MeshGetPrimitives(asset, mesh)
			var primitiveCount i32 = len(primitives)
			for p := 0; p < primitiveCount; p++ {
				var render MeshId = InvalidMesh()
				var baseTexture TextureId = InvalidTexture()
				var metalRoughTexture TextureId = InvalidTexture()

				var primitive gltf.Primitive = primitives[p]
				var meshCount i32 = len(g_models[id.model].meshes)

				var material gltf.Material = gltf.AssetGetMaterial(asset, primitive.material)
				var metallicRoughness gltf.MetallicRoughness = material.pbrMetallicRoughness
				if m < meshCount {
					render = g_models[id.model].meshes[m]
					baseTexture = g_models[id.model].baseTextures[m] // ISSUE : no out of bounds exception
					metalRoughTexture = g_models[id.model].metalRoughTextures[m]
				} else { // TODO : move in init
					var meshCacheKey []i32 = g_models[id.model].meshCacheKey
					var meshCacheVal []MeshId = g_models[id.model].meshCacheVal
					var meshCacheCount i32 = len(meshCacheKey)
					for p := 0; p < meshCacheCount; p++ {
						if meshCacheKey[p] == primitive.indices {
							render = g_models[id.model].meshCacheVal[p]
							p = meshCacheCount
						}
					}

					if IsValidMesh(render) == false {
						render = meshInstance(asset, primitive)
						meshCacheKey = append(meshCacheKey, primitive.indices)
						meshCacheVal = append(meshCacheVal, render)
						g_models[id.model].meshCacheKey = meshCacheKey
						g_models[id.model].meshCacheVal = meshCacheVal
					}

					g_models[id.model].meshes = append(g_models[id.model].meshes, render)

					var dataDir str = g_models[id.model].dataDir
					baseTexture = loadTexture(asset, dataDir, metallicRoughness.baseColorTexture.index)
					g_models[id.model].baseTextures = append(g_models[id.model].baseTextures, baseTexture)

					metalRoughTexture = loadTexture(asset, dataDir, metallicRoughness.metallicRoughnessTexture.index)
					g_models[id.model].metalRoughTextures = append(g_models[id.model].metalRoughTextures, metalRoughTexture)
				}
				m++

				var alphaMode i32 = material.alphaMode
				if ((alphaMode == gltf.ALPHA_BLEND) && alpha) || ((alphaMode == gltf.ALPHA_OPAQUE) && (alpha == false)) {

					if IsValidMesh(render) {
						var effect EffectId = g_fxPerspectivePbr
						EffectUse(effect)

						if IsValidTexture(baseTexture) {
							EffectAssignTexture(effect, 1, baseTexture)
							TextureSamplerState(baseTexture, g_linearWrap) // TODO: use sampler
							DEBUG_0[0] = 1.0
							//printf("BASE_TEXTURE %d\n", baseTexture.texture)
						} else {
							EffectRemoveTexture(effect, 1, TEXTURE_2D)
							DEBUG_0[0] = 0.0
						}

						if IsValidTexture(metalRoughTexture) {
							EffectAssignTexture(effect, 2, metalRoughTexture)
							TextureSamplerState(metalRoughTexture, g_linearWrap)
							DEBUG_0[2] = 1.0
							//printf("ROUGH_TEXTURE %d\n", metalRoughTexture.texture)
						} else {
							EffectRemoveTexture(effect, 2, TEXTURE_2D)
							DEBUG_0[2] = 0.0
						}

						var environmentSpecular TextureId = g_models[id.model].environmentSpecular
						if IsValidTexture(environmentSpecular) {
							EffectAssignTexture(effect, 0, environmentSpecular)
							TextureSamplerState(environmentSpecular, g_linearWrap)
						} else {
							EffectRemoveTexture(effect, 0, TEXTURE_CUBE_MAP)
						}

						var environmentDiffuse TextureId = g_models[id.model].environmentDiffuse
						if IsValidTexture(environmentDiffuse) {
							EffectAssignTexture(effect, 3, environmentDiffuse)
							TextureSamplerState(environmentDiffuse, g_linear0Wrap)
						} else {
							EffectRemoveTexture(effect, 3, TEXTURE_CUBE_MAP)
						}

						var brdf TextureId = g_models[id.model].brdf
						if IsValidTexture(brdf) {
							EffectAssignTexture(effect, 4, brdf)
							TextureSamplerState(brdf, g_linear0Wrap)
						} else {
							EffectRemoveTexture(effect, 0, TEXTURE_2D)
						}

						var tmp []f32 = g_models[id.model].tmp
						var world []f32 = g_models[id.model].world
						var view []f32 = g_models[id.model].view
						var projection []f32 = g_models[id.model].projection

						var last []f32 = mat.MatrixStackLast(matrixStack)
						tmp = mat.MatrixMultiply(tmp, last, world)

						//mat.MatrixPrint("WORLD : ", tmp)
						//mat.MatrixPrint("LAST : ", last)
						//mat.MatrixPrint("TMP : ", tmp)

						EffectAssignMatrix4(effect, 1, tmp, false)
						EffectAssignMatrix4(effect, 2, view, false)
						EffectAssignMatrix4(effect, 3, projection, false)

						if EffectIsValidUniformLocation(effect, 4) {
							var color []f32 = g_models[id.model].color
							var baseColorFactor [4]f32
							baseColorFactor = metallicRoughness.baseColorFactor
							color[0] = baseColorFactor[0]
							color[1] = baseColorFactor[1]
							color[2] = baseColorFactor[2]
							color[3] = baseColorFactor[3]
							EffectAssignVector4(effect, 4, color)
						}

						if EffectIsValidUniformLocation(effect, 6) {
							var color []f32 = g_models[id.model].color
							color[0] = 0.0
							color[1] = metallicRoughness.roughnessFactor
							color[2] = metallicRoughness.metallicFactor
							color[3] = 0.0
							EffectAssignVector4(effect, 6, color)
						}

						var cameraPosition []f32 = g_models[id.model].cameraPosition
						EffectAssignVector4(effect, 5, cameraPosition)
						EffectAssignVector4(effect, 0, DEBUG_0)

						MeshRender(render)
					}
				}
			}

			var children []i32 = gltf.NodeGetChildren(asset, node)
			var childCount i32 = len(children)
			stack = append(stack, -1)
			if childCount > 0 {
				for i := 0; i < childCount; i++ {
					stack = append(stack, children[i])
				}
			}
		}
	}

	stack = resize(stack, 0)
	g_models[id.model].stack = stack
	matrixStack = resize(matrixStack, 0)
	g_models[id.model].matrixStack = matrixStack
}
