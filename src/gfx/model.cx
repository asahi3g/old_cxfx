package gfx

import "gltf"

// Globals ...
var g_models []Model

// ModelId ...
type ModelId struct {
	model i32
}

// Model ...
type Model struct {
	stack []i32
	asset gltf.AssetId
	transforms []f32
	meshes []MeshId
	textures []TextureId
	world []f32
	view []f32
	projection []f32
	color []f32
	dataDir str
	filename str
	matrixStack []f32
	identity []f32 // TODO : remove
	tmp []f32 // TODO : remove
}

// ModelIsValid ...
func ModelIsValid(id ModelId) (out bool) {
	out = id.model >= 0 && id.model < len(g_models)
}

// ModelCreateFromFile ...
func ModelCreateFromFile(dataDir str, filename str) (out ModelId){
	out.model = len(g_models)

	var model Model
	model.color = resize(model.color, 4)
	model.color[0] = 1.0
	model.color[1] = 0.0
	model.color[2] = 1.0
	model.color[3] = 1.0
	model.dataDir = dataDir
	model.filename = filename
	model.asset = gltf.AssetCreate(dataDir, filename)
	var identity []f32
	identity = mat.Identity(identity)
	model.identity = identity
	gltf.AssetPrint(model.asset)
	g_models = append(g_models, model)
}

type channelInfo struct {
	count i32
	data []f32
	dataLen i32
}

func meshInstance(id gltf.AssetId, primitive gltf.Primitive) (out MeshId) {
	var mode i32
	printf("instancing : mode %d, indices %d, material %d\n", primitive.mode, primitive.indices, primitive.material)
	if primitive.mode == gltf.PRIMITIVE_LINES {
		mode = gl.LINES
	} else if primitive.mode == gltf.PRIMITIVE_TRIANGLES {
		mode = gl.TRIANGLES
	} else {
		printf("primitive type not implemented\n")
		out = InvalidMesh()
		return
	}

	// attributes
	var channels []channelInfo
	var attributes []VertexAttribute
	var vertexCount i32 = 0
	var attributeCount i32 = len(primitive.attributes)
	var byteStride i32 = 0
	var componentStride i32 = 0
	for a := 0; a < attributeCount; a++ {
		var accessor gltf.Accessor = gltf.AssetGetAccessor(id, primitive.attributes[a].accessor)
		if a > 0 && accessor.count != vertexCount {
			printf("wrong number of vectices\n")
			out = InvalidMesh()
			return
		}

		vertexCount = accessor.count
		if accessor.componentType != gl.FLOAT { // ISSUE : how to pass []struct to BufferData ?
			printf("buffer type not implemented\n")
			out = InvalidMesh()
			return
		}

		var attribute VertexAttribute
		attribute.componentCount = accessor.componentCount
		attribute.componentType = gl.FLOAT // TODO : handle non float attributes
		attribute.componentByteSize = g_sizeofFloat // TODO handle non float attributes
		attribute.componentOffset = componentStride
		attribute.byteOffset = byteStride

		var attributeType i32 = primitive.attributes[a].attributeType
		var binding i32 = -1
		if attributeType == gltf.ATTRIBUTE_POSITION {
			binding = BIND_POSITION
		} else if attributeType == gltf.ATTRIBUTE_NORMAL {
			binding = BIND_NORMAL
		} else if attributeType == gltf.ATTRIBUTE_COLOR {
			binding = BIND_COLOR
		} else if attributeType == gltf.ATTRIBUTE_TEXCOORD {
			binding = BIND_TEXCOORD
		}

		attribute.binding = binding

		attributes = append(attributes, attribute)

		var channel channelInfo
		channel.data = accessor.dataF32
		channel.dataLen = len(channel.data)
		channel.count = attribute.componentCount

		channels = append(channels, channel)
		byteStride = byteStride + attribute.componentCount * attribute.componentByteSize
		componentStride = componentStride + attribute.componentCount
	}

	var vertexLen i32 = componentStride * vertexCount
	if vertexLen <= 0 {
		printf("invalid vertex buffer\n")
		out = InvalidMesh()
		return
	}

	// vertices
	var vertices []f32 // TODO : test perf with loop reordering + resize(vertices, vertexLen)
	for v := 0; v < vertexCount; v++ {
		for c := 0; c < attributeCount; c++ {
			var data []f32 = channels[c].data
			var dataLen i32 = channels[c].dataLen
			var count i32 = channels[c].count
			for i := 0; i < count; i++ {
				vertices = append(vertices, data[v * count + i])
			}
		}
	}

	// indices
	var indices []ui32
	var indicesAccessor gltf.Accessor = gltf.AssetGetAccessor(id, primitive.indices)
	var indicesType i32 = indicesAccessor.componentType
	if indicesAccessor.componentCount != 1 ||
	   (indicesAccessor.componentType != gl.UNSIGNED_SHORT && indicesAccessor.componentType != gl.UNSIGNED_INT) ||
	   indicesAccessor.attributeTypeEnum != gltf.TYPE_SCALAR {
		printf("invalid index buffer format : componentCount %d, componentType %d, attributeType %d\n",
			indicesAccessor.componentCount, indicesAccessor.componentType, indicesAccessor.attributeTypeEnum)
		out = InvalidMesh()
		return
	}

	if indicesType == gl.UNSIGNED_SHORT { // TODO : use unsigned short indices
		/*var indicesUI16 []ui16 = indicesAccessor.dataUI16
		var indexCount i32 = len(indicesUI16)
		for i := 0; i < indexCount; i++ {
			indices = append(indices, ui16.ui32(indicesUI16))
		}*/
		indices = indicesAccessor.dataUI32
	} else if indicesType == gl.UNSIGNED_INT {
		indices = indicesAccessor.dataUI32
	} else {
		printf("invalid index buffer type\n")
		out = InvalidMesh()
		return
	}

	printf("meshInstance %d, %d, %d\n", len(attributes), len(indices), len(vertices))
	if len(attributes) > 0 && len(indices) > 0 && len(vertices) > 0 {
		var nullIndices []ui32
		var nullVertices []f32
		out = MeshCreate(mode, attributes, len(indices), len(vertices))
		MeshBegin(out) // TODO : remove MeshBegin/MeshEnd, data should be uploaded with BufferData in MeshInstance.
		g_meshes[out.mesh].vertices = vertices
		g_meshes[out.mesh].indices = indices
		MeshEnd(out)
	}
}

// ModelSetWorld ...
func ModelSetWorld(id ModelId, world []f32) {
	panicIfNot(ModelIsValid(id), "invalid model")
	g_models[id.model].world = resize(g_models[id.model].world, 16)
	var i i32 = copy(g_models[id.model].world, world)
}

// ModelSetView ...
func ModelSetView(id ModelId, view []f32) {
	panicIfNot(ModelIsValid(id), "invalid model")
	g_models[id.model].view = resize(g_models[id.model].view, 16)
	var i i32 = copy(g_models[id.model].view, view)
}

// ModelSetProjection ...
func ModelSetProjection(id ModelId, projection []f32) {
	panicIfNot(ModelIsValid(id), "invalid model")
	g_models[id.model].projection = resize(g_models[id.model].projection, 16)
	var i i32 = copy(g_models[id.model].projection, projection)
}

// ModelRender ...
func ModelRender(id ModelId) {
	panicIfNot(ModelIsValid(id), "invalid model")

	var asset gltf.AssetId = g_models[id.model].asset
	var roots []i32 = gltf.AssetGetRootNodes(asset)
	var rootCount i32 = len(roots)
	var stack []i32 = resize(g_models[id.model].stack, rootCount)
	var matrixStack []f32 = g_models[id.model].matrixStack//, rootCount * 16)
	matrixStack = resize(matrixStack, 0)

	for i := 0; i < rootCount; i++ {
		stack[i] = roots[i]
	}

	var m i32
	var identity []f32 = g_models[id.model].identity
	matrixStack = mat.MatrixStackPush(matrixStack, identity)
	for len(stack) > 0 {
		var stackLen i32 = len(stack)

		stackLen--
		var node i32 = stack[stackLen]

		var nodeMatrix []f32 = gltf.NodeGetMatrix(asset, node)
		if len(nodeMatrix) <= 0 {
			nodeMatrix = identity
		}


		matrixStack = mat.MatrixStackPush(matrixStack, nodeMatrix)
		stack = resize(stack, stackLen)

		var mesh i32 = gltf.NodeGetMesh(asset, node)
		var primitives []gltf.Primitive = gltf.MeshGetPrimitives(asset, mesh)
		var primitiveCount i32 = len(primitives)
		for p := 0; p < primitiveCount; p++ {
			var render MeshId
			var textureId TextureId

			var primitive gltf.Primitive = primitives[p]
			var meshCount i32 = len(g_models[id.model].meshes)

			var material gltf.Material = gltf.AssetGetMaterial(asset, primitive.material)
			var metallicRoughness gltf.MetallicRoughness = material.pbrMetallicRoughness

			if m < meshCount {
				render = g_models[id.model].meshes[m]
				textureId = g_models[id.model].textures[m] // ISSUE : no out of bounds exception
			} else { // TODO : move in init
				render = meshInstance(asset, primitive)
				g_models[id.model].meshes = append(g_models[id.model].meshes, render)

				var texture gltf.Texture = gltf.AssetGetTexture(asset, metallicRoughness.baseColorTexture)
				var image gltf.Image = gltf.AssetGetImage(asset, texture.source)
				textureId = TextureCreate(sprintf("%s%s", g_models[id.model].dataDir, image.uri), FORMAT_R8_G8_B8_A8, 0, 0, -1, false)
					//printf("TEXTURE %d\n", textureId.texture)
					//panicIf(true, "texture")
				g_models[id.model].textures = append(g_models[id.model].textures, textureId)
			}

			if IsValidMesh(render) {
				var effect EffectId
				if IsValidTexture(textureId) {
					effect = g_fxPerspectivePbr
				} else {
					effect = g_fxPerspectiveColor
				}

				EffectUse(effect)

				if IsValidTexture(textureId) {
					EffectAssignTexture(effect, 0, textureId)
					TextureSamplerState(textureId, g_linearWrap) // TODO: use sampler
				}

				var tmp []f32 = g_models[id.model].tmp
				var world []f32 = g_models[id.model].world
				var view []f32 = g_models[id.model].view
				var projection []f32 = g_models[id.model].projection

				tmp = resize(tmp, 0)
				tmp = mat.Multiply(tmp, mat.MatrixStackLast(matrixStack), world)

				EffectAssignMatrix4(effect, 1, tmp, false)
				EffectAssignMatrix4(effect, 2, view, false)
				EffectAssignMatrix4(effect, 3, projection, false)

				if EffectIsValidUniformLocation(effect, 4) {
					var color []f32 = g_models[id.model].color
					var baseColorFactor [4]f32
					baseColorFactor = metallicRoughness.baseColorFactor
					color[0] = baseColorFactor[0]
					color[1] = baseColorFactor[1]
					color[2] = baseColorFactor[2]
					color[3] = baseColorFactor[3]
					EffectAssignVector4(effect, 4, color)
				}
				/*DEBUG_0[0] = 0.0
				DEBUG_0[1] = 1.0
				DEBUG_0[2] = 0.0
				DEBUG_0[3] = 0.0
				EffectAssignVector4(effect, 0, DEBUG_0)*/

				MeshRender(render)
			}


			m++
		}

		var children []i32 = gltf.NodeGetChildren(asset, node)
		var childCount i32 = len(children)
		if childCount > 0 {
			for i := 0; i < childCount; i++ {
				stack = append(stack, children[i])
			}
		}


	}

	stack = resize(stack, 0)
	g_models[id.model].stack = stack
	matrixStack = resize(matrixStack, 0)
	g_models[id.model].matrixStack = matrixStack
}
