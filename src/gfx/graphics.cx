package gfx

import "gl"
import "mat"
import "os"

// TODO : print gl extensions on init
// TODO : refactor transition shader
//
// Constants ...
var TRIANGLES i32 = gl.TRIANGLES
var UNSIGNED_SHORT i32 = gl.UNSIGNED_SHORT
var LINEAR i32 = gl.LINEAR
var CLAMP_TO_EDGE i32 = gl.CLAMP_TO_EDGE
var REPEAT i32 = gl.REPEAT
var COLOR_BUFFER_BIT i32 = gl.COLOR_BUFFER_BIT
var DEPTH_BUFFER_BIT i32 = gl.DEPTH_BUFFER_BIT
var LESS i32 = gl.LESS
var RGBA i32 = gl.RGBA
var FLOAT i32 = gl.FLOAT
var TEXTURE_2D i32 = gl.TEXTURE_2D
var TEXTURE_CUBE_MAP i32 = gl.TEXTURE_CUBE_MAP
var SRC_ALPHA i32 = gl.SRC_ALPHA
var ONE_MINUS_SRC_ALPHA i32 = gl.ONE_MINUS_SRC_ALPHA
var ONE i32 = gl.ONE
var ZERO i32 = gl.ZERO

// Globals ...
var DEBUG_0 []f32

var g_sizeofF32 i32 = 4
var g_sizeofI32 i32 = 4
var g_sizeofUI32 i32 = 4
var g_sizeofUI16 i32 = 2

var g_colorMaskRed bool = true
var g_colorMaskGreen bool = true
var g_colorMaskBlue bool = true
var g_colorMaskAlpha bool = true

var g_blend bool = false
var g_srcBlend i32 = 0
var g_dstBlend i32 = 0

var g_depthTest bool = false
var g_depthFunc i32 = gl.LESS
var g_depthMask bool = true

var g_stencilTest bool = false
var g_stencilWrite i32 = 256
var g_stencilFunc i32 = gl.ALWAYS
var g_stencilFuncRef i32 = 0
var g_stencilFuncMask i32 = 256
var g_stencilOpFail i32 = gl.KEEP
var g_stencilOpDepthFail i32 = gl.KEEP
var g_stencilOpDepthPass i32 = gl.KEEP

var g_clearColor mat.v4
var g_clearDepth f64
var g_clearStencil i32

var g_textureCUBE i32 = -1
var g_texture2D i32 = -1
var g_framebuffer i32 = -1

var gfx_width f32 = 0.0
var gfx_height f32 = 0.0
var gfx_viewportSize mat.v2 = mat.v2_zero
var gfx_viewportBounds mat.v4 = mat.v4_zero
var gfx_ratio_x f32 = 1.0
var gfx_ratio_y  f32 = 1.0
var gfx_red mat.v4
var gfx_green mat.v4
var gfx_blue mat.v4
var gfx_pink mat.v4
var gfx_white mat.v4
var gfx_black mat.v4
var gfx_zero mat.v4

var gfx_viewportX i32 = 0
var gfx_viewportY i32 = 0
var gfx_viewportWidth i32 = 0
var gfx_viewportHeight i32 = 0

var gfx_scissor bool = false
var gfx_scissorX i32 = 0
var gfx_scissorY i32 = 0
var gfx_scissorWidth i32 = 0
var gfx_scissorHeight i32 = 0

var g_tfxDefault TemplateId
var g_tfxFade TemplateId
var g_tfxSky TemplateId
var g_tfxPbr TemplateId

var g_fxVertexColor2D EffectId = EffectInvalid()
var g_fxTexture2D EffectId = EffectInvalid()
var g_fxUniformColor3D EffectId = EffectInvalid()
var g_fxTexture3D EffectId = EffectInvalid()
var g_fxFade_0 EffectId = EffectInvalid()
var g_fxFade_1 EffectId = EffectInvalid()
var g_fxSky EffectId = EffectInvalid()

var g_linear0Wrap SamplerState = SamplerStateCreate(gl.LINEAR, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT)
var g_linearWrap SamplerState = SamplerStateCreate(gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR, gl.REPEAT, gl.REPEAT, gl.REPEAT)
var g_linearClamp SamplerState = SamplerStateCreate(gl.LINEAR_MIPMAP_NEAREST, gl.LINEAR, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE)
var g_nearestClamp SamplerState = SamplerStateCreate(gl.NEAREST, gl.NEAREST, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE, gl.CLAMP_TO_EDGE)


var g_vertexLayout []VertexAttribute

// VertexLayout ...
func VertexLayout()(out []VertexAttribute) {
	out = g_vertexLayout
}

// GlError ...
func GlError() (error bool) {
	error = false
	var glerr i32 = -1
	for glerr != 0  {
		glerr = gl.GetError()
		if  glerr != 0 {
			error = true
			if glerr == gl.INVALID_ENUM {
				printf("GL_INVALID_ENUM\n")
			} else if glerr == gl.INVALID_VALUE {
				printf("GL_INVALID_VALUE\n")
			} else if glerr == gl.INVALID_OPERATION {
				printf("GL_INVALID_OPERATION\n")
			} else if glerr == gl.STACK_OVERFLOW {
				printf("GL_STACK_OVERFLOW\n")
			} else if glerr == gl.STACK_UNDERFLOW {
				printf("GL_STACK_UNDERFLOW\n")
			} else if glerr == gl.OUT_OF_MEMORY {
				printf("GL_OUT_OF_MEMORY\n")
			} else if glerr != 0 {
				panicIfNot(false, "invalid glError\n")
			}
		}
	}
}

// NoGlError ...
func NoGlErrror() (noerror bool) {
	var error bool = GlError()
	noerror = error == false // panic if noerror = (GlError() == false)
}

// GlStatus ...
func GlStatus() (error bool) {
	error = false
	var glstat i32
	glstat = gl.CheckFramebufferStatus(gl.FRAMEBUFFER)
	panicIf(GlError(), "CheckFramebufferStatus")
	if (glstat != gl.FRAMEBUFFER_COMPLETE) {
		error = true
		if (glstat == gl.FRAMEBUFFER_UNDEFINED) {
			printf("GL_FRAMEBUFFER_UNDEFINED\n")
		} else if (glstat == gl.FRAMEBUFFER_INCOMPLETE_ATTACHMENT) {
			printf("GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT\n")
		} else if (glstat == gl.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT) {
			printf("GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT\n")
		} else if (glstat == gl.FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER) {
			printf("GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER\n")
		} else if (glstat == gl.FRAMEBUFFER_INCOMPLETE_READ_BUFFER) {
			printf("GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER\n")
		} else if (glstat == gl.FRAMEBUFFER_UNSUPPORTED) {
			printf("GL_FRAMEBUFFER_UNSUPPORTED\n")
		} else if (glstat == gl.FRAMEBUFFER_INCOMPLETE_MULTISAMPLE) {
			printf("GL_FRAMEBUFFER_INCOMPLETE_MULTISAMPLE\n")
		} else if (glstat == gl.FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS) {
			printf("GL_FRAMEBUFFER_INCOMPLETE_LAYER_TARGETS\n")
		} else {
			panicIfNot(false, "invalid glFramebufferStatus")
		}
	}
}

// GlString ...
func GlString(value i32) (out str) {
	if value == gl.RGBA {
		out = "RGBA"
	} else if value == gl.DEPTH_COMPONENT {
		out = "DEPTH_COMPONENT"
	} else if value == gl.DEPTH_COMPONENT24 {
		out = "DEPTH_COMPONENT24"
	} else if value == gl.UNSIGNED_BYTE {
		out = "UNSIGNED_BYTE"
	} else if value == gl.TEXTURE_2D {
		out = "TEXTURE_2D"
	} else if value == gl.TEXTURE_CUBE_MAP {
		out = "TEXTURE_CUBE_MAP"
	} else {
		out = "unknown gl enum"
	}
}

// NoGlStatus ...
func NoGlStatus() (nostatus bool) { // ISSUE : typo in function name GlStatus instaed of NoGlStatus : error: /home/reash/go/src/github.com/skycoin/cx/lib/cxfx/src/graphics.cx:123 identifier 'error' does not exist
	var status bool = GlStatus()
	nostatus = status == false // panic if nostatus = (GlStatus() == false)
}

// Location ...
type Location struct {
	location i32
	Type i32
	name str
	bound bool
}

// LocationBind ...
func LocationBind(locations []Location, location i32, slot i32, name str, Type i32) (out []Location) {
	var count i32 = len(locations)
	for i := count; i <= slot; i++ {
		locations = append(locations, LocationCreate(-1, "", -1))
	}

	locations[slot] = LocationCreate(location, name, Type)
	out = locations
}


// LocationCreate ...
func LocationCreate(location i32, name str, Type i32) (out Location) {
	out.location = location
	out.name = name
	out.Type = Type
	out.bound = false
}

func assignTexture(target i32, slot i32, sampler i32, name i32) () {
	gl.Uniform1i(sampler, slot)
	panicIf(GlError(), sprintf("gl.Uniform1i(%d, %d)", sampler, slot))

	gl.ActiveTexture(gl.TEXTURE0 + slot)
	panicIf(GlError(), "gl.ActiveTexture")

	bindTexture(target, name)
}

func assignFloat(slot i32, value f32) {
	gl.Uniform1f(slot, value)
	panicIf(GlError(), "gl.Uniform1f")
}

func assignVector4(slot i32, value []f32) {
	panicIf(len(value) % 4 != 0, "invalid strid")
	gl.Uniform4fv(slot, len(value) / 4, value)
}

func assignMatrix4(slot i32, value []f32, transpose bool) {
	panicIf(len(value) % 16 != 0, "invalid stride")
	gl.UniformMatrix4fv(slot, len(value) / 16, transpose, value)
	panicIf(GlError(), "gl.UniformMatrix4vf")
}

func bindTexture(target i32, name i32) {
	if target == gl.TEXTURE_2D {
		//if g_texture2D != name  { // TODO : fix cache
			gl.BindTexture(gl.TEXTURE_2D, name)
			panicIf(GlError(), "gl.BindTexture")
			g_texture2D = name
		//}
	} else if target == gl.TEXTURE_CUBE_MAP {
		//if g_textureCUBE != name  { // TODO : fix cache
			gl.BindTexture(gl.TEXTURE_CUBE_MAP, name)
			panicIf(GlError(), "gl.BindTexture")
			g_textureCUBE = name
		//}
	}
}

func bindFramebuffer(name i32) {
	if g_framebuffer != name {
		gl.BindFramebuffer(gl.FRAMEBUFFER, name)
		SetViewport(gfx_viewportBounds)
		SetScissor(gfx_viewportBounds)
		panicIf(GlError(), "gl.BindFramebuffer")
	}
}

// EnableBlending ...
func EnableBlending(srcBlend i32, dstBlend i32) () {
	if (g_blend == false) {
		g_blend = true
		gl.Enable(gl.BLEND)
		panicIf(GlError(), "gl.Enable(gl.BLEND)")
		if ((g_srcBlend != srcBlend) || (g_dstBlend != dstBlend)) {
			g_srcBlend = srcBlend
			g_dstBlend = dstBlend
			gl.BlendFunc(g_srcBlend, g_dstBlend)
			panicIf(GlError(), "gl.BlendFunc")
		}
	}
}

// DisableBlending ...
func DisableBlending() () {
	if (g_blend == true) {
		g_blend = false
		gl.Disable(gl.BLEND)
		panicIf(GlError(), "gl.Disable(gl.BLEND)")
	}
}

// DepthState ...
func DepthState(test bool, compare i32, write bool) {
	DepthTest(test)
	DepthFunc(compare)
	DepthWrite(write)
}

// DepthTest ...
func DepthTest(value bool) {
	if (value) {
		EnableDepth()
	} else {
		DisableDepth()
	}
}

// EnableDepth ...
func EnableDepth() () {
	if (g_depthTest == false) {
		g_depthTest = true
		gl.Enable(gl.DEPTH_TEST)
		panicIf(GlError(), "gl.Enable(gl.DEPTH_TEST)")
	}
}

// DisableDepth ...
func DisableDepth() () {
	if (g_depthTest == true) {
		g_depthTest = false
		gl.Disable(gl.DEPTH_TEST)
		panicIf(GlError(), "gl.Disable(gl.DEPTH_TEST)")
	}
}

// DepthFunc ...
func DepthFunc(value i32) {
	if (g_depthFunc != value) {
		g_depthFunc = value
		gl.DepthFunc(g_depthFunc)
		panicIf(GlError(), "gl.DepthFunc")
	}
}

// DepthWrite ...
func DepthWrite(value bool) {
	if (g_depthMask != value) {
		g_depthMask = value
		gl.DepthMask(g_depthMask)
		panicIf(GlError(), "gl.DepthWrite")
	}
}

// StencilState ...
func StencilState(test bool, compare i32, ref i32, mask i32, sfail i32, dpfail i32, dppass i32, write i32) {
	StencilTest(test)
	StencilFunc(compare, ref, mask)
	StencilOp(sfail, dpfail, dppass)
	StencilWrite(write)
}

// StencilTest ...
func StencilTest(value bool) {
	if (value) {
		EnableStencil()
	} else {
		DisableStencil()
	}
}

// EnableStencil ...
func EnableStencil() () {
	if (g_stencilTest == false) {
		g_stencilTest = true
		gl.Enable(gl.STENCIL_TEST)
		panicIf(GlError(), "gl.Enable(gl.STENCIL_TEST)")
	}
}

// DisableStencil ...
func DisableStencil() () {
	if (g_stencilTest == true) {
		g_stencilTest = false
		gl.Disable(gl.STENCIL_TEST)
		panicIf(GlError(), "gl.Disable(gl.STENCIL_TEST")
	}
}

// StencilFunc ...
func StencilFunc(compare i32, ref i32, mask i32) {
	if (g_stencilFunc != compare ||
		g_stencilFuncRef != ref ||
		g_stencilFuncMask != mask) {
		g_stencilFunc = compare
		g_stencilFuncRef = ref
		g_stencilFuncMask = mask
		gl.StencilFunc(g_stencilFunc, g_stencilFuncRef, g_stencilFuncMask)
		panicIf(GlError(), "gl.StencilFunc")
	}
}

// StencilOp ...
func StencilOp(sfail i32, dpfail i32, dppass i32) {
	if (g_stencilOpFail != sfail ||
		g_stencilOpDepthFail != dpfail ||
		g_stencilOpDepthPass != dppass) {
		g_stencilOpFail = sfail
		g_stencilOpDepthFail = dpfail
		g_stencilOpDepthPass = dppass
		gl.StencilOp(g_stencilOpFail, g_stencilOpDepthFail, g_stencilOpDepthPass)
		panicIf(GlError(), "gl.StencilOp")
	}
}

// StencilWrite ...
func StencilWrite(write i32) {
	if (g_stencilWrite != write) {
		g_stencilWrite = write
		gl.StencilMask(g_stencilWrite)
		panicIf(GlError(), "gl.StencilMask")
	}
}

// Clear ...
func Clear(buffers i32, color mat.v4, depth f64, stencil i32) () {
	if ((g_clearColor.x != color.x) ||
		(g_clearColor.y != color.y) ||
		(g_clearColor.z != color.z) ||
		(g_clearColor.w != color.w)) {
		g_clearColor = color
		gl.ClearColor(g_clearColor.x, g_clearColor.y, g_clearColor.z, g_clearColor.w)
		panicIf(GlError(), "gl.ClearColor")
	}
	if (g_clearDepth != depth) {
		g_clearDepth = depth
		gl.ClearDepth(g_clearDepth)
	}
	if (g_clearStencil != stencil) {
		g_clearStencil = stencil
		gl.ClearStencil(g_clearStencil)
	}
	gl.Clear(buffers)
	panicIf(GlError(), "gl.Clear")
}

// ColorWrite ...
func ColorWrite(red bool, green bool, blue bool, alpha bool) {
	if (g_colorMaskRed != red ||
		g_colorMaskGreen != green ||
		g_colorMaskBlue != blue ||
		g_colorMaskAlpha != alpha) {
		g_colorMaskRed = red
		g_colorMaskGreen = green
		g_colorMaskBlue = blue
		g_colorMaskAlpha = alpha
		gl.ColorMask(g_colorMaskRed, g_colorMaskGreen, g_colorMaskBlue, g_colorMaskAlpha)
		panicIf(GlError(), "gl.ColorMask")
	}
}

// SetViewport ...
func SetViewport(bounds mat.v4) {

	var x i32 = f32.i32(bounds.x)
	var y i32 = f32.i32(bounds.y)
	var width i32 = f32.i32(bounds.z)
	var height i32 = f32.i32(bounds.w)

	if (gfx_viewportX != x ||
		gfx_viewportY != y ||
		gfx_viewportWidth != width ||
		gfx_viewportHeight != height) {
		gfx_viewportX = x
		gfx_viewportY = y
		gfx_viewportWidth = width
		gfx_viewportHeight = height
		gl.Viewport(x, y, width, height)
		panicIf(GlError(), "gl.Viewport")
	}
}

// SetScissor ...
func SetScissor(bounds mat.v4) {
	if (gfx_scissor == false) {
		gfx_scissor = true
		gl.Enable(gl.SCISSOR_TEST)
		panicIf(GlError(), "gl.Scissor")
	}

	var x i32 = f32.i32(bounds.x)
	var y i32 = f32.i32(bounds.y)
	var width i32 = f32.i32(bounds.z)
	var height i32 = f32.i32(bounds.w)

	if (gfx_scissorX != x ||
		gfx_scissorY != y ||
		gfx_scissorWidth != width ||
		gfx_scissorHeight != height) {
		gfx_scissorX = x
		gfx_scissorY = y
		gfx_scissorWidth = width
		gfx_scissorHeight = height
		gl.Scissor(x, y, width, height)
		panicIf(GlError(), "gl.Scissor")
	}
}


// Init ...
func Init(width i32, height i32, dataDir str)() {
	/*var view []f32
	view = resize(view, 16)
	State.View = view

	var projection []f32
	projection = resize(projection, 16)
	State.Projection = projection*/

	DEBUG_0 = resize(DEBUG_0, 4)
	g_vertexLayout = append(g_vertexLayout, VertexAttributeCreate(ATTRIBUTE_POSITION, 3, FLOAT))
	g_vertexLayout = append(g_vertexLayout, VertexAttributeCreate(ATTRIBUTE_COLOR, 4, FLOAT))
	g_vertexLayout = append(g_vertexLayout, VertexAttributeCreate(ATTRIBUTE_TEXCOORD, 2, FLOAT))

	gfx_red   = mat.v4_(1.0, 0.0, 0.0, 1.0)
	gfx_green = mat.v4_(0.0, 1.0, 0.0, 1.0)
	gfx_blue  = mat.v4_(0.0, 0.0, 1.0, 1.0)
	gfx_pink  = mat.v4_(1.0, 0.0, 1.0, 1.0)
	gfx_white = mat.v4_(1.0, 1.0, 1.0, 1.0)
	gfx_black = mat.v4_(0.0, 0.0, 0.0, 1.0)
	gfx_zero  = mat.v4_(0.0, 0.0, 0.0, 0.0)

	g_clearColor = gfx_pink

	gl.Init()
	panicIf(GlError(), "gl.Init")

	gl.Disable(gl.BLEND)
	panicIf(GlError(), "gl.Disable(gl.BLEND)")

	gl.Disable(gl.CULL_FACE)
	panicIf(GlError(), "gl.Disable(gl.CULL_FACE)")

	gl.Disable(gl.DEPTH_TEST)
	panicIf(GlError(), "gl.Disable(gl.DEPTH_TEST)")

	gl.ClearColor(g_clearColor.x, g_clearColor.y, g_clearColor.z, g_clearColor.w)
	panicIf(GlError(), "gl.ClearColor")

	resizeViewport(width, height)

	shaderInit(dataDir)

	g_tfxDefault = TemplateCreate("fxTemplateDefault", "default.vsh", "default.psh")
	g_tfxFade = TemplateCreate("fxTemplateFade", "default.vsh", "fade.psh")
	g_tfxSky = TemplateCreate("fxTemplateSky", "default.vsh", "sky.psh")
	g_tfxPbr = TemplateCreate("fxTemplatePbr", "default.vsh", "default.psh")

	// default
	TemplateReset(g_tfxDefault)
	TemplateSetKey(g_tfxDefault, USE_COLOR_VTX, true)
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_COLOR, "i_v4Color")
	TemplateBindUniform(g_tfxDefault, UNIFORM_DEBUG_0, "DEBUG_0")
	g_fxVertexColor2D = TemplateInstance(g_tfxDefault)

	TemplateReset(g_tfxDefault)
	TemplateSetKey(g_tfxDefault, USE_COLOR_VTX, true)
	TemplateSetKey(g_tfxDefault, USE_COLOR_MAP, true)
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_COLOR, "i_v4Color")
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_TEXCOORD, "i_v2Texcoord")
	TemplateBindSampler(g_tfxDefault, SAMPLER_COLOR_0, "u_t2Color", TEXTURE_2D)
	TemplateBindUniform(g_tfxDefault, UNIFORM_DEBUG_0, "DEBUG_0")
	g_fxTexture2D = TemplateInstance(g_tfxDefault)

	TemplateReset(g_tfxDefault)
	TemplateSetVertexKey(g_tfxDefault, USE_TRANSFORM, true)
	TemplateSetPixelKey(g_tfxDefault, USE_COLOR_UNI, true)
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindUniform(g_tfxDefault, UNIFORM_DEBUG_0, "DEBUG_0")
	TemplateBindUniform(g_tfxDefault, UNIFORM_WORLD, "u_m44World")
	TemplateBindUniform(g_tfxDefault, UNIFORM_VIEW, "u_m44View")
	TemplateBindUniform(g_tfxDefault, UNIFORM_PROJECTION, "u_m44Projection")
	TemplateBindUniform(g_tfxDefault, UNIFORM_COLOR, "u_v4Color")
	g_fxUniformColor3D = TemplateInstance(g_tfxDefault)

	TemplateReset(g_tfxDefault)
	TemplateSetVertexKey(g_tfxDefault, USE_TRANSFORM, true)
	TemplateSetKey(g_tfxDefault, USE_COLOR_VTX, true)
	TemplateSetKey(g_tfxDefault, USE_COLOR_MAP, true)
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_COLOR, "i_v4Color")
	TemplateBindAttribute(g_tfxDefault, ATTRIBUTE_TEXCOORD, "i_v2Texcoord")
	TemplateBindSampler(g_tfxDefault, SAMPLER_COLOR_0, "u_t2Color", TEXTURE_2D)
	TemplateBindUniform(g_tfxDefault, UNIFORM_DEBUG_0, "DEBUG_0")
	TemplateBindUniform(g_tfxDefault, UNIFORM_WORLD, "u_m44World")
	TemplateBindUniform(g_tfxDefault, UNIFORM_VIEW, "u_m44View")
	TemplateBindUniform(g_tfxDefault, UNIFORM_PROJECTION, "u_m44Projection")
	g_fxTexture3D = TemplateInstance(g_tfxDefault)

	// fade
	TemplateReset(g_tfxFade)
	TemplateSetKey(g_tfxFade, USE_COLOR_MAP, true)
	TemplateSetPixelKey(g_tfxFade, USE_PASS_0, true)
	TemplateBindAttribute(g_tfxFade, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindAttribute(g_tfxFade, ATTRIBUTE_TEXCOORD, "i_v2Texcoord")
	TemplateBindSampler(g_tfxFade, SAMPLER_COLOR_0, "u_t2Src", TEXTURE_2D)
	TemplateBindSampler(g_tfxFade, SAMPLER_COLOR_1, "u_t2Dst", TEXTURE_2D)
	TemplateBindUniform(g_tfxFade, UNIFORM_DEBUG_0, "DEBUG_0")
	TemplateBindUniform(g_tfxFade, UNIFORM_TIME, "u_fTime")
	g_fxFade_0 = TemplateInstance(g_tfxFade)

	TemplateReset(g_tfxFade)
	TemplateSetKey(g_tfxFade, USE_COLOR_MAP, true)
	TemplateSetPixelKey(g_tfxFade, USE_PASS_1, true)
	TemplateBindAttribute(g_tfxFade, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindAttribute(g_tfxFade, ATTRIBUTE_TEXCOORD, "i_v2Texcoord")
	TemplateBindSampler(g_tfxFade, SAMPLER_COLOR_0, "u_t2Src", TEXTURE_2D)
	TemplateBindSampler(g_tfxFade, SAMPLER_COLOR_1, "u_t2Dst", TEXTURE_2D)
	TemplateBindUniform(g_tfxFade, UNIFORM_DEBUG_0, "DEBUG_0")
	TemplateBindUniform(g_tfxFade, UNIFORM_TIME, "u_fTime")
	g_fxFade_1 = TemplateInstance(g_tfxFade)

	// sky
	TemplateReset(g_tfxSky)
	TemplateSetVertexKey(g_tfxSky, USE_TRANSFORM, true)
	TemplateBindAttribute(g_tfxSky, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindSampler(g_tfxSky, SAMPLER_ENV_DIFFUSE, "u_tcEnvironmentDiffuse", TEXTURE_CUBE_MAP)
	TemplateBindUniform(g_tfxSky, UNIFORM_DEBUG_0, "DEBUG_0")
	TemplateBindUniform(g_tfxSky, UNIFORM_WORLD, "u_m44World")
	TemplateBindUniform(g_tfxSky, UNIFORM_VIEW, "u_m44View")
	TemplateBindUniform(g_tfxSky, UNIFORM_PROJECTION, "u_m44Projection")
	g_fxSky = TemplateInstance(g_tfxSky)

	// pbr
	TemplateReset(g_tfxPbr)
	TemplateSetVertexKey(g_tfxPbr, USE_TRANSFORM, true)
	TemplateBindAttribute(g_tfxPbr, ATTRIBUTE_POSITION, "i_v3Position")
	TemplateBindAttribute(g_tfxPbr, ATTRIBUTE_NORMAL, "i_v3Normal")
	TemplateBindAttribute(g_tfxPbr, ATTRIBUTE_TEXCOORD, "i_v2Texcoord")
	TemplateBindAttribute(g_tfxPbr, ATTRIBUTE_TANGENT, "i_v4Tangent")
	TemplateBindAttribute(g_tfxPbr, ATTRIBUTE_WEIGHT, "i_v4Weights")
	TemplateBindAttribute(g_tfxPbr, ATTRIBUTE_JOINT, "i_v4Joints")
	TemplateBindSampler(g_tfxPbr, SAMPLER_COLOR_0, "u_t2Color", TEXTURE_2D)
	TemplateBindSampler(g_tfxPbr, SAMPLER_NORMAL, "u_t2Normal", TEXTURE_2D)
	TemplateBindSampler(g_tfxPbr, SAMPLER_METAL_ROUGH, "u_t2MetalRough", TEXTURE_2D)
	TemplateBindSampler(g_tfxPbr, SAMPLER_BRDF, "u_t2BRDF", TEXTURE_2D)
	TemplateBindSampler(g_tfxPbr, SAMPLER_EMISSIVE, "u_t2Emissive", TEXTURE_2D)
	TemplateBindSampler(g_tfxPbr, SAMPLER_ENV_SPECULAR, "u_tcEnvironmentSpecular", TEXTURE_CUBE_MAP)
	TemplateBindSampler(g_tfxPbr, SAMPLER_ENV_DIFFUSE, "u_tcEnvironmentDiffuse", TEXTURE_CUBE_MAP)
	TemplateBindSampler(g_tfxPbr, SAMPLER_OCCLUSION, "u_t2Occlusion", TEXTURE_2D)
	TemplateBindUniform(g_tfxPbr, UNIFORM_DEBUG_0, "DEBUG_0")
	TemplateBindUniform(g_tfxPbr, UNIFORM_WORLD, "u_m44World")
	TemplateBindUniform(g_tfxPbr, UNIFORM_VIEW, "u_m44View")
	TemplateBindUniform(g_tfxPbr, UNIFORM_PROJECTION, "u_m44Projection")
	TemplateBindUniform(g_tfxPbr, UNIFORM_CAMERA_POSITION, "u_v4CameraPosition")
	TemplateBindUniform(g_tfxPbr, UNIFORM_COLOR, "u_v4Color")
	TemplateBindUniform(g_tfxPbr, UNIFORM_METAL_ROUGH, "u_v4MetalRough")
	TemplateBindUniform(g_tfxPbr, UNIFORM_EMISSIVE, "u_v4Emissive")
}

// Resize ...
func Resize(width i32, height i32)() {
	resizeViewport(width, height)
	ResizeTargets(width, height)
	//ResizeTextures(width, height)
}

func resizeViewport(width i32, height i32) {
	gfx_width = i32.f32(width)
	gfx_height = i32.f32(height)
	gfx_viewportSize = mat.v2_(gfx_width, gfx_height)
	gfx_viewportBounds = mat.v4_(0.0, 0.0, gfx_width, gfx_height)
	gfx_ratio_y = gfx_width / gfx_height
	gfx_ratio_x = gfx_height / gfx_width
	SetViewport(gfx_viewportBounds)
	SetScissor(gfx_viewportBounds)
}

// Destroy ...
func Destroy()() {

	//PopScissor()

	gl.Destroy()

	ProgramUse(NullProgram())

	var i i32
	for i = 0; i < len(g_programs); i = i + 1 {
		//printf("gl.DeleteProgram(%d)\n", g_programs[i])
		gl.DeleteProgram(g_programs[i]) // ##0 crash
		panicIf(GlError(), "gl.DeleteProgram")
	}

	for i = 0; i < len(g_vbos); i = i + 1 {
		//printf("gl.DeleteBuffers(%d)\n", g_vbos[i])
		gl.DeleteBuffers(1, g_vbos[i])
		panicIf(GlError(), "glDeleteBuffers")
	}

	for i = 0; i < len(g_vaos); i = i + 1 {
		//printf("gl.DeleteVertexArrays(%d)\n", g_vaos[i])
		gl.DeleteVertexArrays(1, g_vaos[i])
		panicIf(GlError(), "g_DeleteVertexArrays")
	}


	DestroyTargets()
	DestroyTextures()
}


