package gfx

import "fps"

// TODO : custom vertex attributes.
// TODO : stop using hardcoded vertex attributes in MeshAppend*
// TODO : use DrawElement

// Globals ...
var g_vaos []i32
var g_vbos []i32
var g_meshes []Mesh
var g_freeMeshes []MeshId
//var g_debugMesh MeshId

// VertexAttribute ...
type VertexAttribute struct {
	componentCount i32
	componentType i32
	componentByteSize i32
	componentOffset i32
	byteOffset i32
	binding i32
}

// VertexAttributeCreate ...
func VertexAttributeCreate(binding i32, componentCount i32, componentType i32) (out VertexAttribute) {
	out.binding = binding
	out.componentCount = componentCount
	out.componentType = componentType
	if componentType == gl.FLOAT {
		out.componentByteSize = 4
	}
}

// VertexAttributePrint ...
func VertexAttributePrint(a VertexAttribute) {
	printf("componentCount %d, componentType %d, componentByteSize %d, componentOffset %d, byteOffset %d, binding %d\n",
		a.componentCount, a.componentType, a.componentByteSize, a.componentOffset, a.byteOffset, a.binding)
}

// MeshId ...
type MeshId struct {
	mesh i32
}

// Mesh ...
type Mesh struct {
	id MeshId

	primitive i32
	index i32

	indices []byte
	indexFormat i32
	indexByteStride i32
	indexComponentStride i32
	indexByteCount i32
	indexCount i32

	vertices []byte
	attributes []VertexAttribute
	vertexByteStride i32
	vertexComponentStride i32
	vertexByteCount i32
	vertexCount i32

	vao i32
	ibo i32
	vbo i32
	usePosition bool
	useNormal bool
	useColor bool
	useTexcoord bool
	useTangent bool
	useWeight bool
	useJoint bool
}

// InvalidMesh ...
func InvalidMesh() (out MeshId) {
	out.mesh = -1
}

// IsValidMesh ...
func IsValidMesh(id MeshId) (out bool) {
	out = id.mesh >= 0 && id.mesh < len(g_meshes)
}

// MeshUsePosition ...
func MeshUsePosition(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	out = g_meshes[id.mesh].usePosition
}

// MeshUseNormal ...
func MeshUseNormal(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	out = g_meshes[id.mesh].useNormal
}

// MeshUseColor ...
func MeshUseColor(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	out = g_meshes[id.mesh].useColor
}

// MeshUseTexcoord ...
func MeshUseTexcoord(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	out = g_meshes[id.mesh].useTexcoord
}

// MeshUseTangent ...
func MeshUseTangent(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	out = g_meshes[id.mesh].useTangent
}

// MeshUseWeight ...
func MeshUseWeight(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	out = g_meshes[id.mesh].useWeight
}

// MeshUseJoint ...
func MeshUseJoint(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	out = g_meshes[id.mesh].useJoint
}

// MeshPrint ...
func MeshPrint(message str, id MeshId) {
	panicIfNot(IsValidMesh(id), "invalid id")
	var index i32 = id.mesh
	printf("id %d, indices %d, vertices %d, attributes %d, primitive %d, vao %d, vbo %d, ibo %d, vertexByteStride %d, vertexComponentStride %d, vertexCount %d\n",
		index,
		len(g_meshes[index].indices),
		len(g_meshes[index].vertices),
		len(g_meshes[index].attributes),
		g_meshes[index].primitive,
		g_meshes[index].vao,
		g_meshes[index].vbo,
		g_meshes[index].ibo,
		g_meshes[index].vertexByteStride,
		g_meshes[index].vertexComponentStride,
		g_meshes[index].vertexCount)
}

// MeshIsEmpty ...
func MeshIsEmpty(id MeshId) (out bool) {
	panicIfNot(IsValidMesh(id), "invalid id")
	var mesh i32 = id.mesh
	var index i32 = len(g_meshes[mesh].vertices)
	out = index <= 0
}

// MeshLock ...
func MeshLock(primitive i32, indexFormat i32, indexCount i32, attributes []VertexAttribute, vertexCount i32) (out MeshId) {
	var freeMeshCount i32 = len(g_freeMeshes)
	if (freeMeshCount > 0) {
		var newFreeMeshCount i32 = freeMeshCount - 1
		out.mesh = g_freeMeshes[newFreeMeshCount].mesh
		g_freeMeshes = resize(g_freeMeshes, newFreeMeshCount)
	} else {
		out = MeshCreate(primitive, indexFormat, indexCount, attributes, vertexCount)
	}
	panicIfNot(IsValidMesh(out), "invalid id")
}

// MeshUnlock ...
func MeshUnlock(id MeshId) {
	panicIfNot(IsValidMesh(id), "invalid id")
	g_freeMeshes = append(g_freeMeshes, id)
}

func meshCreate(primitive i32, indexType i32, indexCount i32, indices []byte, attributes []VertexAttribute, vertexCount i32,  vertices []byte, usage i32) (out MeshId) {
	out.mesh = len(g_meshes)

	if primitive == gl.TRIANGLES {
		panicIfNot((indexCount % 3) == 0, "(indexCount % 3) == 0")
	} else if primitive == gl.LINES {
		panicIfNot((indexCount % 2) == 0, "(indexCount % 2) == 0")
	}

	var mesh Mesh
	mesh.attributes = attributes
	mesh.primitive = primitive
	mesh.indexFormat = indexType;


	// stride
	var indexByteStride i32 = 0
	if indexType == gl.UNSIGNED_SHORT {
		indexByteStride = 2
	} else if indexType == gl.UNSIGNED_INT {
		indexByteStride = 4
	} else {
		panicIf(true, "invalid index format")
	}
	mesh.indexByteStride = indexByteStride

	//
	var attributeCount i32 = len(attributes)
	var vertexByteStride i32
	var vertexComponentStride i32
	for i := 0; i < attributeCount; i++ {
		var attribute VertexAttribute = attributes[i]
		var componentCount i32 = attribute.componentCount
		var componentByteSize i32 = attribute.componentByteSize
		attribute.byteOffset = vertexByteStride
		attribute.componentOffset = vertexComponentStride
		VertexAttributePrint(attribute)
		vertexComponentStride = vertexComponentStride + componentCount
		vertexByteStride = vertexByteStride + componentCount * componentByteSize
		attributes[i] = attribute
	}
	mesh.vertexByteStride = vertexByteStride
	mesh.vertexComponentStride = vertexComponentStride

	var indexByteCount i32 = len(indices)
	if indexCount > 0 {
		indexByteCount = indexCount * indexByteStride
	}
	mesh.indexByteCount = indexByteCount

	var vertexByteCount i32 = len(vertices)
	if vertexCount > 0 {
		vertexByteCount = vertexCount * vertexByteStride
	}
	mesh.vertexByteCount = vertexByteCount

	panicIfNot((primitive == gl.TRIANGLES || primitive == gl.LINES), "(primitive == gl.TRIANGLES || primitive == gl.LINES)")
	panicIfNot(vertexByteCount > 0, "vertexByteCount > 0")
	panicIfNot(indexCount > 0, "indexCount > 0")


	panicIfNot(vertexByteStride > 0, "mesh.vertexByteStride > 0")
	panicIfNot((vertexByteCount % vertexByteStride) == 0, "(vertexByteCount % vertexByteStride) == 0")

	// ibo
	mesh.ibo = gl.GenBuffers(1, mesh.ibo)
	panicIf(GlError(), "gl.GenBuffers")
	g_vbos = append(g_vbos, mesh.ibo)

	// vbo
	mesh.vbo = gl.GenBuffers(1, mesh.vbo)
	panicIf(GlError(), "gl.GenBuffers")
	g_vbos = append(g_vbos, mesh.vbo)

	// vao
	mesh.vao = gl.GenVertexArrays(1, mesh.vao)
	panicIf(GlError(), "gl.GenVertexArrays")
	g_vaos = append(g_vaos, mesh.vao)

	gl.BindVertexArray(mesh.vao)
	panicIf(GlError(), "gl.BindVertexArray")

	gl.BindBuffer(gl.ARRAY_BUFFER, mesh.vbo)
	panicIf(GlError(), "gl.BindBuffer")

	gl.BufferData(gl.ARRAY_BUFFER, vertexByteCount, vertices, usage)
	panicIf(GlError(), "gl.BufferData")

	for i := 0; i < attributeCount; i++ {
		gl.EnableVertexAttribArray(attributes[i].binding)
		panicIf(GlError(), "gl.EnableVertexAttribArray")

		gl.VertexAttribPointerI32(attributes[i].binding, attributes[i].componentCount, attributes[i].componentType, false, vertexByteStride, attributes[i].byteOffset)
		panicIf(GlError(), "gl.VertexAttribPointerI32")
	}

	gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.ibo)
	panicIf(GlError(), "gl.BindBuffer")

	gl.BufferData(gl.ELEMENT_ARRAY_BUFFER, indexByteCount, indices, usage)
	panicIf(GlError(), "gl.BufferData")

	g_meshes = append(g_meshes, mesh) // ISSUE : can't use global slice if declared in another file
	panicIfNot(IsValidMesh(out), "invalid id")
}

// MeshInstance ...
func MeshInstance(primitive i32, indexFormat i32, indices []byte, attributes []VertexAttribute, vertices []byte) (out MeshId) {
	out = meshCreate(primitive, indexFormat, 0, indices, attributes, 0, vertices, gl.STATIC_DRAW)
}

// MeshCreate ...
func MeshCreate(primitive i32, indexFormat i32, indexCount i32, attributes []VertexAttribute, vertexCount i32) (out MeshId) { // TODO: refactor
	var indices []byte
	var vertices []byte
	out = meshCreate(primitive, indexFormat, indexCount, indices, attributes, vertexCount, vertices, gl.STREAM_DRAW)
}

// MeshBegin ...
func MeshBegin(id MeshId) () {
	panicIfNot(IsValidMesh(id), "invalid id")
	var mesh i32 = id.mesh
	var lenIndices i32 = len(g_meshes[mesh].indices)
	var lenVertices i32 = len(g_meshes[mesh].vertices)
	g_meshes[mesh].vertices = resize(g_meshes[mesh].vertices, 0)
	g_meshes[mesh].indices = resize(g_meshes[mesh].indices, 0)
}

// MeshEnd ...
func MeshEnd(id MeshId) () {
	panicIfNot(IsValidMesh(id), "invalid id")

	//MeshPrint("MeshEnd : ", id)

	var mesh i32 = id.mesh
	var indexCount i32 = len(g_meshes[mesh].indices)
	var indexByteCount i32 = len(g_meshes[mesh].indices)
	var vertexByteCount i32 = len(g_meshes[mesh].vertices)
	if vertexByteCount > 0 && indexByteCount > 0 {

		g_meshes[mesh].indexByteCount = indexByteCount
		g_meshes[mesh].vertexByteCount = vertexByteCount

		var indexByteStride i32 = g_meshes[mesh].indexByteStride
		panicIfNot(indexByteStride > 0, "invalid index stride")
		panicIfNot((indexByteCount % indexByteStride) == 0, "(indexByteCount % indexByteStride) == 0)")
		g_meshes[mesh].indexCount = indexByteCount / indexByteStride

		var vertexByteStride i32 = g_meshes[mesh].vertexByteStride
		panicIfNot(vertexByteStride > 0, "invalid vertex stride")
		panicIfNot((vertexByteCount % vertexByteStride) == 0, "(vertexByteCount % vertexByteStride) == 0")
		g_meshes[mesh].vertexCount = vertexByteCount / vertexByteStride

		gl.BindVertexArray(g_meshes[mesh].vao)
		panicIf(GlError(), "gl.BindBuffer")

		gl.BindBuffer(gl.ARRAY_BUFFER, g_meshes[mesh].vbo)
		panicIf(GlError(), "gl.BindBuffer")
		gl.BufferSubData(gl.ARRAY_BUFFER, 0, g_meshes[mesh].vertexByteCount, g_meshes[mesh].vertices)
		panicIf(GlError(), "gl.BufferSubData")

		gl.BindBuffer(gl.ELEMENT_ARRAY_BUFFER, g_meshes[mesh].ibo)
		panicIf(GlError(), "gl.BindBuffer")
		gl.BufferSubData(gl.ELEMENT_ARRAY_BUFFER, 0, g_meshes[mesh].indexByteCount, g_meshes[mesh].indices)
		panicIf(GlError(), "gl.BufferSubData")
	}
}

// MeshRender ...
func MeshRender(id MeshId) {
	panicIfNot(IsValidMesh(id), "invalid id")
	var mesh i32 = id.mesh
	gl.BindVertexArray(g_meshes[mesh].vao)
	panicIf(GlError(), "gl.BindVertexArray")

	var null []i32
	var indexFormat i32 = g_meshes[mesh].indexFormat
	var indexCount i32 = g_meshes[mesh].indexCount
	gl.DrawElements(g_meshes[mesh].primitive, indexCount, indexFormat, null)
	panicIf(GlError(), "gl.DrawArrays")
}

// MeshAppendOrthoLine ...
// TODO : pixel coordinates and clipping shouldn't be done in this function
func MeshAppendOrthoLine(id MeshId, line mat.v4, color mat.v4, clip mat.v4, depth f32) () {
	if (clip.z > 0.0 && clip.w > 0.0) {
		panicIfNot(IsValidMesh(id), "invalid id")
		var mesh i32 = id.mesh

		var clipLeft f32 = clip.x
		var clipRight f32 = clip.x + clip.z
		var clipBottom f32 = clip.y
		var clipTop f32 = clip.y + clip.w

		var x0 f32 = line.x
		var y0 f32 = line.y
		var x1 f32 = line.z
		var y1 f32 = line.w

		var cRight bool = x0 > clipRight && x1 > clipRight // ##0 AABB clipping...
		var cLeft bool = x0 < clipLeft && x1 < clipLeft
		var cBottom bool = y0  < clipBottom && y1 < clipBottom
		var cTop bool = y0 > clipTop && y1 > clipTop
		if (cLeft == false && cBottom == false && //cRight == false &&
		cTop == false) {

			var r f32 = color.x
			var g f32 = color.y
			var b f32 = color.z
			var a f32 = color.w

			if (x0 < clipLeft) {
				x0 = clipLeft
			} else if (x0 > clipRight) {
				x0 = clipRight
			}

			if (x1 < clipLeft) {
				x1 = clipLeft
			} else if (x1 > clipRight) {
				x1 = clipRight
			}

			if (y0 < clipBottom) {
				y0 = clipBottom
			} else if (y0 > clipTop) {
				y0 = clipTop
			}

			if (y1 < clipBottom) {
				y1 = clipBottom
			} else if (y1 > clipTop) {
				y1 = clipTop
			}

			x0 = 2.0 * x0 / gfx_width - 1.0
			y0 = 2.0 * y0 / gfx_height - 1.0
			x1 = 2.0 * x1 / gfx_width - 1.0
			y1 = 2.0 * y1 / gfx_height - 1.0

			var indices []byte = g_meshes[mesh].indices
			var vertices []byte = g_meshes[mesh].vertices
			var offset i32 = len(vertices) / g_meshes[mesh].vertexByteStride

			var indexFormat i32 = g_meshes[mesh].indexFormat

			if indexFormat == gl.UNSIGNED_SHORT {
				indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
				indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
			} else if indexFormat == gl.UNSIGNED_INT {
				indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
				indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
			} else {
				panicIf(true, "invalid index format")
			}

			vertices = gl.AppendF32(vertices, x0)
			vertices = gl.AppendF32(vertices, y0)
			vertices = gl.AppendF32(vertices, depth)
			vertices = gl.AppendF32(vertices, r)
			vertices = gl.AppendF32(vertices, g)
			vertices = gl.AppendF32(vertices, b)
			vertices = gl.AppendF32(vertices, a)
			vertices = gl.AppendF32(vertices, 0.0)
			vertices = gl.AppendF32(vertices, 0.0)

			vertices = gl.AppendF32(vertices, x1)
			vertices = gl.AppendF32(vertices, y1)
			vertices = gl.AppendF32(vertices, depth)
			vertices = gl.AppendF32(vertices, r)
			vertices = gl.AppendF32(vertices, g)
			vertices = gl.AppendF32(vertices, b)
			vertices = gl.AppendF32(vertices, a)
			vertices = gl.AppendF32(vertices, 0.0)
			vertices = gl.AppendF32(vertices, 0.0)

			g_meshes[mesh].vertices = vertices
			g_meshes[mesh].indices = indices
		}
	}
}

// MeshAppendRect ...
func MeshAppendRect(id MeshId, rect mat.v4, left mat.v4, right mat.v4, bottom mat.v4, top mat.v4, clip mat.v4, depth f32) () {
	panicIfNot(IsValidMesh(id), "invalid id")
	var x0 f32 = rect.x
	var y0 f32 = rect.y
	var x1 f32 = x0 + rect.z
	var y1 f32 = y0 + rect.w


	// TODO : use DrawElements : same code as MeshAppendOrthoQuad
	MeshAppendOrthoLine(id, mat.v4_(x0, y0, x0, y1), left, clip, depth)
	MeshAppendOrthoLine(id, mat.v4_(x1, y0, x1, y1), right, clip, depth)
	MeshAppendOrthoLine(id, mat.v4_(x0, y0, x1, y0), bottom, clip, depth)
	MeshAppendOrthoLine(id, mat.v4_(x0, y1, x1, y1), top, clip, depth)


}

// MeshAppendOrthoQuad ...
// TODO : pixel coordinate and clipping shouldn't be done in this function
// RECATOR : 
func MeshAppendOrthoQuad(id MeshId, rect mat.v4, uv mat.v4, color mat.v4, clip mat.v4, depth f32) {
	if (clip.z > 0.0 && clip.w > 0.0) {
		panicIfNot(IsValidMesh(id), "invalid id")

		var clipLeft f32 = clip.x
		var clipRight f32 = clip.x + clip.z
		var clipBottom f32 = clip.y
		var clipTop f32 = clip.y + clip.w

		var mesh i32 = id.mesh

		var primitive i32 = g_meshes[mesh].primitive
		panicIfNot(primitive == gl.TRIANGLES, "(*mesh).primitive == gl.TRIANGLES")

		var x f32 = rect.x
		var y f32 = rect.y
		var w f32 = rect.z
		var h f32 = rect.w

		var x1 f32 = x + w
		var y1 f32 = y + h

		var cLeft bool = x < clipLeft && x1 < clipLeft
		var cBottom bool = y  < clipBottom && y1 < clipBottom
		var cRight bool = x > clipRight && x1 > clipRight // ##0 AABB clipping...
		var cTop bool = y > clipTop && y1 > clipTop

		if (cLeft == false && cBottom == false && cRight == false && cTop == false) {
			var r f32 = color.x
			var g f32 = color.y
			var b f32 = color.z
			var a f32 = color.w

			var u0 f32 = uv.x
			var v0 f32 = uv.y
			var u1 f32 = uv.z
			var v1 f32 = uv.w

			var deltaLeft f32 = mat.max(0.0, clipLeft - x)
			var deltaRight f32 = mat.min(0.0, clipRight - x1)

			var deltaBottom f32 = mat.max(0.0, clipBottom - y)
			var deltaTop f32 = mat.min(0.0, clipTop - y1)

			x = mat.max(x, clipLeft)
			y = mat.max(y, clipBottom)

			x1 = mat.min(x1, clipRight)
			y1 = mat.min(y1, clipTop)

			var nw f32 = x1 - x
			var nh f32 = y1 - y

			var du f32 = u1 - u0
			var dv f32 = v0 - v1

			// TODO : inverted uv, fix texture loading ??
			u0 = u0 + du * deltaLeft / w
			u1 = u1 + du * deltaRight / w
			v1 = v1 + dv * deltaBottom / h
			v0 = v0 + dv * deltaTop / h

			x = 2.0 * i32.f32(f32.i32(x)) / gfx_width - 1.0
			y = 2.0 * i32.f32(f32.i32(y)) / gfx_height - 1.0
			x1 = 2.0 * i32.f32(f32.i32(x1)) / gfx_width - 1.0
			y1 = 2.0 * i32.f32(f32.i32(y1)) / gfx_height - 1.0

			var vertices []byte = g_meshes[mesh].vertices
			var indices []byte = g_meshes[mesh].indices
			var offset i32 = len(vertices) / g_meshes[mesh].vertexByteStride // TODO : ui64 offset

			var indexFormat i32 = g_meshes[mesh].indexFormat
			if indexFormat == gl.UNSIGNED_SHORT {
				indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
				indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
				indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
				indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
				indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
				indices = gl.AppendUI16(indices, i32.ui16(offset + 3))
			} else if indexFormat == gl.UNSIGNED_INT {
				indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
				indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
				indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
				indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
				indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
				indices = gl.AppendUI32(indices, i32.ui32(offset + 3))
			} else {
				panicIf(true, "invalid vertex format")
			}

			vertices = gl.AppendF32(vertices, x)
			vertices = gl.AppendF32(vertices, y)
			vertices = gl.AppendF32(vertices, depth)
			vertices = gl.AppendF32(vertices, r)
			vertices = gl.AppendF32(vertices, g)
			vertices = gl.AppendF32(vertices, b)
			vertices = gl.AppendF32(vertices, a)
			vertices = gl.AppendF32(vertices, u0)
			vertices = gl.AppendF32(vertices, v1)

			vertices = gl.AppendF32(vertices, x1)
			vertices = gl.AppendF32(vertices, y)
			vertices = gl.AppendF32(vertices, depth)
			vertices = gl.AppendF32(vertices, r)
			vertices = gl.AppendF32(vertices, g)
			vertices = gl.AppendF32(vertices, b)
			vertices = gl.AppendF32(vertices, a)
			vertices = gl.AppendF32(vertices, u1)
			vertices = gl.AppendF32(vertices, v1)

			vertices = gl.AppendF32(vertices, x)
			vertices = gl.AppendF32(vertices, y1)
			vertices = gl.AppendF32(vertices, depth)
			vertices = gl.AppendF32(vertices, r)
			vertices = gl.AppendF32(vertices, g)
			vertices = gl.AppendF32(vertices, b)
			vertices = gl.AppendF32(vertices, a)
			vertices = gl.AppendF32(vertices, u0)
			vertices = gl.AppendF32(vertices, v0)

			vertices = gl.AppendF32(vertices, x1)
			vertices = gl.AppendF32(vertices, y1)
			vertices = gl.AppendF32(vertices, depth)
			vertices = gl.AppendF32(vertices, r)
			vertices = gl.AppendF32(vertices, g)
			vertices = gl.AppendF32(vertices, b)
			vertices = gl.AppendF32(vertices, a)
			vertices = gl.AppendF32(vertices, u1)
			vertices = gl.AppendF32(vertices, v0)

			g_meshes[mesh].vertices = vertices
			g_meshes[mesh].indices = indices
		}
	}
}

// MeshAppendPlane
func MeshAppendPlane(id MeshId, position mat.v3, width mat.v3, height mat.v3, resx i32, resy i32, uv mat.v4, color mat.v4) {
	panicIfNot(IsValidMesh(id), "invalid id")

	var r f32 = color.x
	var g f32 = color.y
	var b f32 = color.z
	var a f32 = color.w

	var mesh i32 = id.mesh
	var primitive i32 = g_meshes[mesh].primitive
	panicIfNot(primitive == gl.TRIANGLES, "(*mesh).primitive == gl.TRIANGLES")

	var vertices []byte = g_meshes[mesh].vertices
	var base i32 = len(vertices) / 9

	var fw f32 = i32.f32(resx) - 1.0
	var fh f32 = i32.f32(resy) - 1.0

	var indices []byte = g_meshes[mesh].indices
	var indexFormat i32 = g_meshes[mesh].indexFormat
	for x := 0; x < resx; x++ {
		var fx f32 = i32.f32(x)
		var dx f32 = fx / fw
		var dx1 f32 = (fx + 1.0) / fw
		var dw mat.v3 = mat.v3_mulf(width, dx)
		var dw1 mat.v3 = mat.v3_mulf(width, dx1)
		var s0 f32 = uv.x + uv.z * dx
		var s1 f32 = uv.x + uv.z * dx1
		var s2 f32 = uv.x + uv.z * dx
		var s3 f32 = uv.x + uv.z * dx1

		for y := 0; y < resy; y++ {
			var fy f32 = i32.f32(y)
			var dy f32 = fy / fh
			var dy1 f32 = (fy + 1.0) / fh
			var dh mat.v3 = mat.v3_mulf(height, dy)
			var dh1 mat.v3 = mat.v3_mulf(height, dy1)

			var v0 mat.v3 = mat.v3_add(position, mat.v3_add(dw, dh))
			var v1 mat.v3 = mat.v3_add(position, mat.v3_add(dw1, dh))
			var v2 mat.v3 = mat.v3_add(position, mat.v3_add(dw, dh1))
			var v3 mat.v3 = mat.v3_add(position, mat.v3_add(dw1, dh1))

			var t0 f32 = uv.y + uv.w * dy
			var t1 f32 = uv.y + uv.w * dy
			var t2 f32 = uv.y + uv.w * dy1
			var t3 f32 = uv.y + uv.w * dy1 // ISSUE #247 : can redeclare v3 with another type

			if x < resx - 1 &&
			   y < resy - 1 {
				var i0 i32 = base + y * resy + x // TODO : use ui64 
				var i1 i32 = i0 + 1
				var i2 i32 = i0 + resy
				var i3 i32 = i2 + 1
				if indexFormat == gl.UNSIGNED_SHORT {
					indices = gl.AppendUI16(indices, i32.ui16(i0))
					indices = gl.AppendUI16(indices, i32.ui16(i1))
					indices = gl.AppendUI16(indices, i32.ui16(i2))
					indices = gl.AppendUI16(indices, i32.ui16(i2))
					indices = gl.AppendUI16(indices, i32.ui16(i1))
					indices = gl.AppendUI16(indices, i32.ui16(i3))
				} else if indexFormat == gl.UNSIGNED_INT {
					indices = gl.AppendUI32(indices, i32.ui32(i0))
					indices = gl.AppendUI32(indices, i32.ui32(i1))
					indices = gl.AppendUI32(indices, i32.ui32(i2))
					indices = gl.AppendUI32(indices, i32.ui32(i2))
					indices = gl.AppendUI32(indices, i32.ui32(i1))
					indices = gl.AppendUI32(indices, i32.ui32(i3))
				} else {
					panicIf(true, "invalid index format")
				}
			}

			vertices = gl.AppendF32(vertices, v0.x)
			vertices = gl.AppendF32(vertices, v0.y)
			vertices = gl.AppendF32(vertices, v0.z)
			vertices = gl.AppendF32(vertices, r)
			vertices = gl.AppendF32(vertices, g)
			vertices = gl.AppendF32(vertices, b)
			vertices = gl.AppendF32(vertices, a)
			vertices = gl.AppendF32(vertices, s0)
			vertices = gl.AppendF32(vertices, t0)
		}
	}
	g_meshes[mesh].vertices = vertices
	g_meshes[mesh].indices = indices
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func appendV9(vertices []byte, x f32, y f32, z f32, r f32, g f32, b f32, a f32, u f32, v f32) (out []byte) {
	out = vertices
	out = gl.AppendF32(out, x)
	out = gl.AppendF32(out, y)
	out = gl.AppendF32(out, z)
	out = gl.AppendF32(out, r)
	out = gl.AppendF32(out, g)
	out = gl.AppendF32(out, b)
	out = gl.AppendF32(out, a)
	out = gl.AppendF32(out, u)
	out = gl.AppendF32(out, v)
}

// MeshAppendCube ...
// TODO : DrawElements
func MeshAppendCube(id MeshId, position mat.v3, size mat.v3, color mat.v4) {
	panicIfNot(IsValidMesh(id), "invalid id")

	var mesh i32 = id.mesh

	var primitive i32 = g_meshes[mesh].primitive
	panicIfNot(primitive == gl.TRIANGLES, "(*mesh).primitive == gl.TRIANGLES")

	var x f32 = position.x
	var y f32 = position.y
	var z f32 = position.z

	var w f32 = size.x
	var h f32 = size.y
	var d f32 = size.z

	var left f32 = x - w
	var right f32 = x + w

	var bottom f32 = y - h
	var top f32 = y + h

	var front f32 = z + d
	var back f32 = z - d

	var r f32 = color.x
	var g f32 = color.y
	var b f32 = color.z
	var a f32 = color.w

	var vertices []byte = g_meshes[mesh].vertices
	var indices []byte = g_meshes[mesh].indices
	var offset i32 = len(vertices) / g_meshes[mesh].vertexByteStride

	var indexFormat i32 = g_meshes[mesh].indexFormat
	if indexFormat == gl.UNSIGNED_SHORT {
		indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI16(indices, i32.ui16(offset + 0))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 2))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 1))
		indices = gl.AppendUI16(indices, i32.ui16(offset + 3))
		offset = offset + 4
	} else if indexFormat == gl.UNSIGNED_INT {
		indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 3))
		offset = offset + 4

		indices = gl.AppendUI32(indices, i32.ui32(offset + 0))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 2))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 1))
		indices = gl.AppendUI32(indices, i32.ui32(offset + 3))
		offset = offset + 4
	} else {
		panicIf(true, "invalid index format")
	}

	// TODO : remove duplicate vertices
	// TODO : inverted uv, fix texture loading ??
	var u0 f32 = 0.0
	var u1 f32 = 1.0
	var v0 f32 = 1.0
	var v1 f32 = 0.0

	/*r = 1.0
	g = 0.0
	b = 0.0*/
  	vertices = appendV9(vertices, left , bottom, front , r, g, b, a, u0, v0)
	vertices = appendV9(vertices, right, bottom, front , r, g, b, a, u1, v0)
	vertices = appendV9(vertices, left , top   , front , r, g, b, a, u0, v1)
	vertices = appendV9(vertices, right, top   , front , r, g, b, a, u1, v1)

	/*r = 0.0
	g = 1.0
	b = 0.0*/
	vertices = appendV9(vertices, right, bottom, front , r, g, b, a, u0, v0)
	vertices = appendV9(vertices, right, bottom, back  , r, g, b, a, u1, v0)
	vertices = appendV9(vertices, right, top   , front , r, g, b, a, u0, v1)
	vertices = appendV9(vertices, right, top   , back  , r, g, b, a, u1, v1)

	/*r = 0.0
	g = 0.0
	b = 1.0*/
	vertices = appendV9(vertices, right, bottom, back  , r, g, b, a, u0, v0)
	vertices = appendV9(vertices, left , bottom, back  , r, g, b, a, u1, v0)
	vertices = appendV9(vertices, right, top   , back  , r, g, b, a, u0, v1)
	vertices = appendV9(vertices, left , top   , back  , r, g, b, a, u1, v1)

	/*r = 1.0
	g = 1.0
	b = 0.0*/
	vertices = appendV9(vertices, left , bottom, back  , r, g, b, a, u0, v0)
	vertices = appendV9(vertices, left , bottom, front , r, g, b, a, u1, v0)
	vertices = appendV9(vertices, left , top   , back  , r, g, b, a, u0, v1)
	vertices = appendV9(vertices, left , top   , front , r, g, b, a, u1, v1)

	/*r = 1.0
	g = 0.0
	b = 1.0*/
	vertices = appendV9(vertices, left , top   , front , r, g, b, a, u0, v0)
	vertices = appendV9(vertices, right, top   , front , r, g, b, a, u1, v0)
	vertices = appendV9(vertices, left , top   , back  , r, g, b, a, u0, v1)
	vertices = appendV9(vertices, right, top   , back  , r, g, b, a, u1, v1)

	/*r = 0.0
	g = 1.0
	b = 1.0*/
	vertices = appendV9(vertices, right, bottom, front , r, g, b, a, u0, v0)
	vertices = appendV9(vertices, left , bottom, front , r, g, b, a, u1, v0)
	vertices = appendV9(vertices, right, bottom, back  , r, g, b, a, u0, v1)
	vertices = appendV9(vertices, left , bottom, back  , r, g, b, a, u1, v1)

	g_meshes[mesh].vertices = vertices
	g_meshes[mesh].indices = indices
}
