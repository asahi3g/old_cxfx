package gfx

import "gl"

// Globals ...
var g_programs []i32

// Program ...
type Program struct {
	name i32
}

// NullProgram ...
func NullProgram()(out Program) {
	out.name = 0
}

// ProgramCreate ...
func ProgramCreate(attributes[] Attribute, vertex str, pixel str) (out Program) {
	// vertex shader
	var vertexShader i32 = gl.CreateShader(gl.VERTEX_SHADER)
	panicIf(GlError(), "gl.CreateShader")

	gl.ShaderSource(vertexShader, 1, vertex)
	panicIf(GlError(), "gl.ShaderSource")

	gl.CompileShader(vertexShader)
	panicIf(GlError(), "gl.CompileShader")

	// pixel shader
	var pixelShader i32 = gl.CreateShader(gl.FRAGMENT_SHADER)
	panicIf(GlError(), "gl.CreateShader")

	gl.ShaderSource(pixelShader, 1, pixel)
	panicIf(GlError(), "gl.ShaderSource")

	gl.CompileShader(pixelShader)
	panicIf(GlError(), "gl.CompileShader")

	// program
	out.name = gl.CreateProgram()
	panicIf(GlError(), "gl.CreateProgram")
	g_programs = append(g_programs, out.name)

	var count i32 = len(attributes)
	for i := 0; i < count; i++ {
		BindAttribute(out, attributes[i].location, attributes[i].name)
	}

	gl.AttachShader(out.name, vertexShader)
	panicIf(GlError(), "gl.AttachShader")

	gl.AttachShader(out.name, pixelShader)
	panicIf(GlError(), "gl.AttachShader")

	gl.LinkProgram(out.name)
	panicIf(GlError(), "gl.LinkProgram")

	gl.DetachShader(out.name, vertexShader)
	panicIf(GlError(), "gl.LinkProgram")

	gl.DetachShader(out.name, pixelShader)
	panicIf(GlError(), "gl.DetachShader")

	gl.DeleteShader(vertexShader)
	panicIf(GlError(), "gl.DeleteShader")

	gl.DeleteShader(pixelShader)
	panicIf(GlError(), "gl.DeleteShader")
}

// UseProgram ...
func UseProgram(program Program) {
	//printf("use_program(%d)\n", program)
	gl.UseProgram(program.name)
	panicIf(GlError(), "gl.UseProgram")
}

// BindAttribute ...
func BindAttribute(program Program, location i32, name str) () {

	gl.BindAttribLocation(program.name, location, name)
	panicIf(GlError(), sprintf("gl.BindAttributeLocation(%d, %d, %s)", program.name, location, name))

	/*var newLocation i32 = gl.GetAttribLocation(program.name, name)
	panicIf(GlError(), "gl.GetAttribLocation")
	panicIfNot(newLocation == location, sprintf("attribute not found : %s\n", name))*/
}

// BindUniform ...
func BindUniform(program Program, name str) (uniform i32) {
	uniform = TryBindUniform(program, name)
	panicIfNot(uniform >= 0, "uniform>= 0")
}

// TryBindUniform ...
func TryBindUniform(program Program, name str) (uniform i32) {
	uniform = gl.GetUniformLocation(program.name, name) // ##2 crash find a way to test if str is present in gl.Strs
	panicIf(GlError(), "gl.GetUniformLocation")
}

// BindTexture ...
func BindTexture(program Program, name str) (sampler i32) {
	sampler = BindUniform(program, name)
}

