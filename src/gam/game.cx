package gam

import "app"
import "fps"
import "gfx"
import "gui"
import "snd"

// Globals ...
var g_game Game

// Game ...
type Game struct {
    exit bool
    prfSwap fps.ProfileId
    prfFrame fps.ProfileId
    prfUpdate fps.ProfileId
    prfSound fps.ProfileId
    prfUIUpdate fps.ProfileId
    prfUIResize fps.ProfileId
    prfRender fps.ProfileId
}

// Init ...
func Init(name str, width i32, height i32, fps i32, dataDir str)() {
    app.g_application.options.width = width
    app.g_application.options.height = height
    app.g_application.options.fps = fps
    app.g_application.options.dataDir = dataDir

    fps.Init(i32.ui32(app.Fps()))
    app.Init(name, "mainWindow", 2, 1)
    gfx.Init(app.Width(), app.Height(), app.DataDir())
    gui.Init(app.Width(), app.Height(), app.DataDir())
    snd.Init(64, 64)

    g_game.prfSwap = fps.CreateProfile("swap")
    g_game.prfFrame = fps.CreateProfile("frame")
    g_game.prfUpdate = fps.CreateProfile("update")
    g_game.prfSound = fps.CreateProfile("sound")
    g_game.prfUIUpdate = fps.CreateProfile("ui update")
    g_game.prfUIResize = fps.CreateProfile("ui resize")
    g_game.prfRender = fps.CreateProfile("render")
}

// Run ...
func Run(fpsUpdate ui32)() {
    for app.Running() {
        fps.BeginUpdate(fpsUpdate)
        fps.StartProfile(g_game.prfSwap)
        {
            app.BeginFrame()
            fps.StartProfile(g_game.prfFrame)
            {
                // Update ...
                fps.StartProfile(g_game.prfUpdate)
                if g_game.exit {
                    app.Exit()
                }

                fps.StartProfile(g_game.prfSound)
                snd.Update()
                fps.StopProfile(g_game.prfSound)

                fps.StartProfile(g_game.prfUIUpdate)
                gui.Update(fps.DeltaSecond())
                fps.StopProfile(g_game.prfUIUpdate)

                fps.StartProfile(g_game.prfUIResize)
                gui.Resize()
                fps.StopProfile(g_game.prfUIResize)

                fps.StopProfile(g_game.prfUpdate)

                // Render ...
                fps.StartProfile(g_game.prfRender)
                gui.Render()
                fps.StopProfile(g_game.prfRender)
            }
            fps.StopProfile(g_game.prfFrame)
            app.EndFrame()
        }
        fps.StopProfile(g_game.prfSwap)
        fps.EndUpdate()
    }
}

// Destroy ...
func Destroy() {
    app.Destroy()
    snd.Destroy()
    gfx.Destroy()
}
