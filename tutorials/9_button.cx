package main

import "app"
import "fps"
import "gam"
import "gfx"
import "gui"
import "mat"
import "snd"

// TODO : exit when escape key is pressed

// Globals ...
var gameScreen gui.ScreenId

var ry f32 = 0.0

var modelPaths []str

var models []gfx.ModelId
var scales []f32
var rotations []f32

var currentModel i32

var skyMesh gfx.MeshId
var groundMesh gfx.MeshId
var texture gfx.TextureId
var skyDiffuse gfx.TextureId
var skySpecular gfx.TextureId
var brdf gfx.TextureId

var scale []f32 = mat.MatrixAlloc()
var rotate []f32 = mat.MatrixAlloc()
var translate []f32 = mat.MatrixAlloc()
var world [] f32 = mat.MatrixAlloc()
var identity [] f32 = mat.MatrixAlloc()

var camera gam.FpsCameraId

var g_synths []Synth
var g_synthCount i32 = 64

var worldSizeX f32 = 2000.0
var worldSizeZ f32 = 2000.0

var worldCellX i32 = 64
var worldCellZ i32 = 64

var groundWidth i32 = 16
var groundHeight i32 = 16

var voiceId snd.VoiceId

// Synth ...
type Synth struct {
	rx f32
	ry f32
	tx f32
	ty f32
	tz f32
	time f32
	frame i32
	animation gui.AnimationId
	batch gfx.BatchId
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func gameOnEvent(controlIndex i32, controlAction i32) {
	var key i32 = gui.CurrentEvent.keyboard.key
	var action i32 = gui.CurrentEvent.keyboard.action
	var mods i32 = gui.CurrentEvent.keyboard.mods
	if mods == app.MOD_NONE {
		if key == app.KEYCODE_ESCAPE && action == app.KEY_PRESS {
			app.Exit()
		}
	} else if mods == app.MOD_CTRL && action == app.KEY_PRESS {
		if key == app.KEYCODE_LEFT {
			if currentModel <= 0 {
				currentModel = len(models)
			}
			currentModel = currentModel - 1
			ry = 0.0
		} else if key == app.KEYCODE_RIGHT {
			currentModel = (currentModel + 1) % len(models)
			ry = 0.0
		} else if key == app.KEYCODE_UP {
			rotations[currentModel] = rotations[currentModel] + 1.0
		} else if key == app.KEYCODE_DOWN {
			rotations[currentModel] = rotations[currentModel] - 1.0
		}
	}

	gam.FpsCameraProcess(camera, &gui.CurrentEvent)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func gameOnUpdate(controlIndex i32, controlAction i32) {
	gam.FpsCameraUpdate(camera, fps.DeltaTime(), 0.1, 10000.0, 0.5, gfx.gfx_viewportSize.x, gfx.gfx_viewportSize.y)
	gam.FpsCameraApply(camera, &gfx.State)

	var dt f32 = f64.f32(fps.DeltaTime())

	var s f32 = scales[currentModel]
	scale = mat.MatrixCreateScale(scale, s, s, s)

	ry = ry + dt * rotations[currentModel]
	rotate = mat.MatrixCreateRotationY(rotate, ry)

	translate = mat.MatrixCreateTranslation(translate, 0.0, 0.0, 0.0)

	world = mat.MatrixMultiply(world, rotate, scale)
	world = mat.MatrixMultiply(world, translate, world)

	var groundScale f32 = 20.0
	gfx.MeshBegin(groundMesh)
	gfx.MeshAppendPlane(groundMesh,
		mat.v3_(-worldSizeX / (2.0 * groundScale), -10.0, -worldSizeZ / (2.0 * groundScale)),
		mat.v3_(worldSizeX / groundScale, 0.0, 0.0),
		mat.v3_(0.0, 0.0, worldSizeZ / groundScale),
		groundWidth, groundHeight,
		mat.v4_(0.0, 0.0, 10.0, 10.0),
		mat.v4_(1.0, 1.0, 1.0, 1.0))
	gfx.MeshEnd(groundMesh)

	gfx.MeshBegin(skyMesh)
	gfx.MeshAppendCube(skyMesh,
		mat.v3_(0.0, 0.0, 0.0),
		mat.v3_(5000.0, 5000.0, 5000.0),
		mat.v4_(1.0, 1.0, 1.0, 1.0))
	gfx.MeshEnd(skyMesh)

	for i := 0; i < g_synthCount; i++ {
		var ty f32 = g_synths[i].ty
		var frame i32 = g_synths[i].frame
		var frameCount i32 = 0
		var animation AnimationId
		if ty <= 0.0 {
			ty = 500.0 + f32.rand() * 500.0
			animation = gui.g_synthAnim
			frameCount = gui.AnimationFrameCount(animation)
			frame = 0//i32.rand(0, frameCount)
			g_synths[i].animation = animation
			g_synths[i].tx = i32.f32(i32.rand(0, worldCellX)) * worldSizeX / i32.f32(worldCellX) - worldSizeX / 2.0
			g_synths[i].tz = i32.f32(i32.rand(0, worldCellZ)) * worldSizeZ / i32.f32(worldCellZ) - worldSizeZ / 2.0
		} else {
			animation = g_synths[i].animation
			frameCount = gui.AnimationFrameCount(animation)
			//frame++
			if frame >= frameCount {
				frame = 0
			}
			ty = ty - 20.0 * dt + f32.rand() * 10.0 * dt
		}

		var textureId gfx.TextureId = gui.AnimationGetFrame(animation, frame) // ISSUE : can't be named texture : silently clash with global variable
		var batch gfx.BatchId = gfx.GetBatch(gfx.g_fxPerspectivePbr, textureId, 0, gfx.g_linearClamp, false, g_synthCount * 12)
		g_synths[i].batch = batch
		g_synths[i].frame = frame
		g_synths[i].ty = ty
	}

	gfx.BeginBatches()
	for i := 0; i < g_synthCount; i++ {
		var batch gfx.BatchId = g_synths[i].batch
		var mesh gfx.MeshId = gfx.BatchGetMesh(batch)
		var tx f32 = g_synths[i].tx
		var ty f32 = g_synths[i].ty
		var tz f32 = g_synths[i].tz
		gfx.MeshAppendCube(mesh,
			mat.v3_(tx, ty, tz),
			mat.v3_(20.0, 20.0, 20.0),
			mat.v4_(1.0, 1.0, 1.0, 1.0))
	}
	gfx.EndBatches()
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func gameOnRender(controlIndex i32, controlAction i32) {
	var view []f32 = gam.FpsCameraGetView(camera)
	var projection []f32 = gam.FpsCameraGetProjection(camera)
	var cameraPosition mat.v3 = gam.FpsCameraGetPosition(camera)

	gfx.DisableBlending()
	gfx.DepthState(true, gfx.LESS, true)
	gfx.Clear(gfx.COLOR_BUFFER_BIT | gfx.DEPTH_BUFFER_BIT, mat.v4_(0.3, 0.5, 0.6, 1.0), 1.0D, 0)

	//skyMesh
	gfx.EffectUse(gfx.g_fxPerspectiveSky)
	gfx.EffectAssignTexture(gfx.g_fxPerspectiveSky, 0, skySpecular)
	gfx.TextureSamplerState(skySpecular, gfx.g_linearWrap)
	gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveSky, 1, identity, false)
	gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveSky, 2, view, false)
	gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveSky, 3, projection, false)
	gfx.MeshRender(skyMesh)

	//gfx.DisableBlending()
	//gfx.DepthState(true, gfx.LESS, true)

	// groundMesh
	gfx.EffectUse(gfx.g_fxPerspectiveTexture)
	gfx.EffectAssignTexture(gfx.g_fxPerspectiveTexture, 0, texture)
	gfx.TextureSamplerState(texture, gfx.g_linearWrap)
	gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveTexture, 1, identity, false)
	gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveTexture, 2, view, false)
	gfx.EffectAssignMatrix4(gfx.g_fxPerspectiveTexture, 3, projection, false)
	gfx.MeshRender(groundMesh)

	gfx.RenderBatches(false)

	// model
	var model gfx.ModelId = models[currentModel]

	gfx.ModelSetWorld(model, world)
	gfx.ModelSetView(model, view)
	gfx.ModelSetProjection(model, projection)
	gfx.ModelSetEnvironmentSpecular(model, skySpecular)
	gfx.ModelSetEnvironmentDiffuse(model, skyDiffuse)
	gfx.ModelSetBRDF(model, brdf)
	gfx.ModelSetCameraPosition(model, cameraPosition)
	gfx.DisableBlending()
	gfx.DepthState(true, gfx.LESS, true)
	gfx.ModelRender(model, false)

	gfx.ModelSetWorld(model, world)
	gfx.ModelSetView(model, view)
	gfx.ModelSetProjection(model, projection)
	gfx.ModelSetEnvironmentSpecular(model, skySpecular)
	gfx.ModelSetEnvironmentDiffuse(model, skyDiffuse)
	gfx.ModelSetBRDF(model, brdf)
	gfx.ModelSetCameraPosition(model, cameraPosition)
	gfx.EnableBlending(gfx.SRC_ALPHA, gfx.ONE_MINUS_SRC_ALPHA)
	gfx.DepthState(true, gfx.LESS, false)
	gfx.ModelRender(model, true)

}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func skycoinOnUpdate(controlIndex i32, controlAction i32) {
	if snd.VoiceState(voiceId) == snd.VOICE_STOPPED {
		snd.VoicePlay(voiceId)
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func onPlayButton(controlIndex i32, controlAction i32) {
	if controlAction == app.KEY_PRESS {
		gui.ScreenShow(gameScreen)
	} else if controlAction != app.KEY_RELEASE && controlAction != app.KEY_REPEAT {
		panicIfNot(false, "invalid action")
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func onExitButton(controlIndex i32, controlAction i32) {
	if controlAction == app.KEY_PRESS {
		app.Exit()
	} else if controlAction != app.KEY_RELEASE && controlAction != app.KEY_REPEAT {
		panicIfNot(false, "invalid action")
	}
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func loadModel(path str, filename str, s f32, r f32) {
	var model gfx.ModelId = gfx.ModelCreateFromFile(sprintf("%s/models/%s/", app.DataDir(), path), filename)
	models = append(models, model)

	scales = append(scales, s)
	rotations = append(rotations, r)
}

//-----------------------------------------------------------------------------
//-----------------------------------------------------------------------------
func main()() {
	// init
	gam.Init("Button Tutorial", 1024, 768, 60, "")

	loadModel("glTF-Sample-Models/Box/glTF", "Box.gltf", 1.0, 1.0)
	loadModel("glTF-Sample-Models/Duck/glTF", "Duck.gltf", 1.0, 1.0)
	loadModel("glTF-Sample-Models/MetalRoughSpheres/glTF", "MetalRoughSpheres.gltf", 1.0, 0.0)
	loadModel("Skyminer", "skyminer_2_sans_materials.gltf", 0.07, 1.0)
	loadModel("Skyminer", "skyminer_2_avec_materials.gltf", 0.07, 1.0)
	loadModel("glTF-Sample-Models/DamagedHelmet/glTF", "DamagedHelmet.gltf", 3.0, 1.0)
	loadModel("glTF-Sample-Models/BoomBox/glTF", "BoomBox.gltf", 200.0, 1.0)
	loadModel("glTF-Sample-Models/Sponza/glTF", "Sponza.gltf", 10.0, 0.0)

	groundMesh = gfx.MeshLock(gfx.TRIANGLES, gfx.g_vertexLayout, 6 * groundWidth * groundHeight, 6 * groundWidth * groundHeight)
	texture = gfx.TextureCreate(sprintf("%s/textures/Skycoin-Cloud-BW-Vertical-on_black@2x.png", app.DataDir()),
		gfx.FORMAT_R8_G8_B8_A8, 0, 0, -1, false)
	skySpecular = gfx.TextureCreateCube(sprintf("%s/textures/skybox/", app.DataDir()), ".jpg",
		gfx.FORMAT_R8_G8_B8_A8, 0, 0, -1, false)
	skyDiffuse= gfx.TextureCreateCube(sprintf("%s/textures/irradiance/", app.DataDir()), ".png",
		gfx.FORMAT_R8_G8_B8_A8, 0, 0, 0, false)
	brdf = gfx.TextureCreate(sprintf("%s/textures/brdfLUT.png", app.DataDir()),
		gfx.FORMAT_R8_G8_B8_A8, 0, 0, 0, false)

	camera = gam.FpsCameraCreate()
	identity = mat.MatrixIdentity(identity)
	g_synths = resize(g_synths, g_synthCount)
	var audioId snd.AudioId = snd.AudioCreate(sprintf("%s/audios/skycoin_baby.wav", app.DataDir()))
	voiceId = snd.VoiceCreate(audioId)

	// mainScreen
	var mainScreen gui.ScreenId = gui.ScreenCreate("mainScreen")
	gui.ControlSetSkin(mainScreen.base, gui.g_blackSkin)
	gui.ControlSetDock(mainScreen.base, gui.DOCK_FILL)
	gui.ControlSetPadding(mainScreen.base, mat.v4_(200.0, 150.0, 200.0, 150.0))
	gui.ScreenSetDuration(mainScreen, -1.0D)
	{
		var playButton gui.LabelId = gui.LabelCreate("playButton")
		gui.ControlAddChild(mainScreen.base, playButton.base)
		gui.ControlSetSkin(playButton.base, gui.g_blueSkin)
		gui.ControlSetDock(playButton.base, gui.DOCK_TOP)
		gui.ControlSetFocusable(playButton.base, 1)
		gui.ControlSetPadding(playButton.base, mat.v4_(5.0, 5.0, 5.0, 5.0))
		gui.ControlSetAutosize(playButton.base, gui.AUTOSIZE_Y)
		gui.LabelSetFont(playButton, gui.g_boldFont)
		gui.LabelSetText(playButton, "Play")
		gui.LabelSetOnState(playButton, "main", "onPlayButton")
		gui.LabelSetSize(playButton, gui.g_fontSizeButton)
		gui.LabelSetColor(playButton, gui.g_white)
		gui.LabelSetAlign(playButton, gui.ALIGN_CENTER)

		var exitButton gui.LabelId = gui.LabelCreate("exitButton")
		gui.ControlAddChild(mainScreen.base, exitButton.base)
		gui.ControlSetSkin(exitButton.base, gui.g_blueSkin)
		gui.ControlSetDock(exitButton.base, gui.DOCK_TOP)
		gui.ControlSetFocusable(exitButton.base, 1)
		gui.ControlSetPadding(exitButton.base, mat.v4_(5.0, 5.0, 5.0, 5.0))
		gui.ControlSetAutosize(exitButton.base, gui.AUTOSIZE_Y)
		gui.LabelSetFont(exitButton, gui.g_boldFont)
		gui.LabelSetText(exitButton, "Exit")
		gui.LabelSetOnState(exitButton, "main", "onExitButton")
		gui.LabelSetSize(exitButton, gui.g_fontSizeButton)
		gui.LabelSetColor(exitButton, gui.g_white)
		gui.LabelSetAlign(exitButton, gui.ALIGN_CENTER)
	}

	// gameScreen
	gameScreen = gui.ScreenCreate("gameScreen")
	gui.ControlSetDock(gameScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(gameScreen, -1.0D)
	gui.ScreenSetOnExit(gameScreen, mainScreen)
	gui.ScreenSetOnEvent(gameScreen, "main", "gameOnEvent")
	gui.ScreenSetOnUpdate(gameScreen, "main", "gameOnUpdate")
	gui.ScreenSetOnRender(gameScreen, "main", "gameOnRender")

	// titleScreen
	var titleScreen gui.ScreenId = gui.ScreenCreate("titleScreen")
	gui.ControlSetSkin(titleScreen.base, gui.g_blackSkin)
	gui.ControlSetDock(titleScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(titleScreen, 2.0D)
	gui.ScreenSetOnNext(titleScreen, mainScreen)
	{
		var label gui.LabelId= gui.LabelCreate("titleLabel")
		gui.ControlAddChild(titleScreen.base, label.base)
		gui.ControlSetBounds(label.base, mat.v4_(0.0, 0.0, gfx.gfx_width, gfx.gfx_height))
		gui.ControlSetAlign(label.base, gui.ALIGN_CENTER)
		gui.LabelSetFont(label, gui.g_boldFont)
		gui.LabelSetText(label, app.Name())
		gui.LabelSetSize(label, gui.g_fontSizeTitle)
		gui.LabelSetAlign(label, gui.ALIGN_CENTER)
		gui.LabelSetColor(label, gui.g_gold)
	}

	// skycoinScreen
	var skycoinScreen gui.ScreenId = gui.ScreenCreate("skycoinSceen")
	gui.ControlSetSkin(skycoinScreen.base, gui.g_blackSkin)
	gui.ControlSetDock(skycoinScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(skycoinScreen, 2.0D)
	gui.ScreenSetOnUpdate(skycoinScreen, "main", "skycoinOnUpdate")
	gui.ScreenSetOnNext(skycoinScreen, titleScreen)
	{
		var picture PictureId = gui.PictureCreate("skycoinPicture")
		gui.ControlAddChild(skycoinScreen.base, picture.base)
		gui.ControlSetBounds(picture.base, mat.v4_(0.0, 0.0, gfx.gfx_width / 2.0, gfx.gfx_height / 2.0))
		gui.ControlSetAlign(picture.base, gui.ALIGN_CENTER)
		gui.ControlSetAutoscale(picture.base, gui.AUTOSCALE)
		gui.PictureSetAlign(picture, gui.ALIGN_CENTER)
		gui.PictureSetAnimation(picture, gui.g_skycoinAnim)
	}

	// bootScreen
	var bootScreen gui.ScreenId = gui.ScreenCreate("bootScreen")
	gui.ControlSetSkin(bootScreen.base, gui.g_bootSkin)
	gui.ControlSetDock(bootScreen.base, gui.DOCK_FILL)
	gui.ScreenSetDuration(bootScreen, 2.0D)
	gui.ScreenSetOnNext(bootScreen, skycoinScreen)

	// run
	gui.ScreenShow(bootScreen)
	gam.Run()

	// destroy
	gfx.MeshUnlock(skyMesh)
	gfx.MeshUnlock(groundMesh)
	gam.Destroy()
}

