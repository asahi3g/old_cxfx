uniform samplerCube u_tcEnvironmentSpecular;
uniform sampler2D u_t2Color;
uniform sampler2D u_t2MetalRough;
uniform samplerCube u_tcEnvironmentDiffuse;
uniform sampler2D u_t2BRDF;

uniform vec4 DEBUG_0;
uniform vec4 u_v4Color;
uniform mat4 u_m44World;
uniform vec4 u_v4CameraPosition;
uniform vec4 u_v4MetalRough;

in vec3 v_v3Position;
in vec3 v_v3Normal;
in vec2 v_v2Texcoord;

out vec4 o_v4Color;

const float REMOVE = 0.0000001;
const float M_PI = 3.141592653589793;
const float c_MinRoughness = 0.04;
const vec3 c_v3LightColor = vec3(1, 1, 1);

struct pbr_s
{
	float NdotL;                  // cos angle between normal and light direction
	float NdotV;				  // cos angle between normal and view direction
	float NdotH;				  // cos angle between normal and half vector
	float LdotH;				  // cos angle between light direction and half vector
	float VdotH;				  // cos angle between view direction and half vector
	float perceptualRoughness;	// roughness value, as authored by the model creator (input to shader)
	float metalness;			  // metallic value at the surface
	vec3 reflectance0;			// full reflectance color (normal incidence angle)
	vec3 reflectance90;		   // reflectance color at grazing angle
	float alphaRoughness;		 // roughness mapped to a more linear change in the roughness (proposed by [2])
	vec3 diffuseColor;			// color contribution from diffuse lighting
	vec3 specularColor;		   // color contribution from specular lighting
};

/*vec3 reflect(vec3 direction, vec3 normal)
{
	return normalize(direction - 2 * dot(direction, normal) * normal);
}*/

vec3 gamma(vec3 color)
{
	return pow(color, vec3(2.2));
}

vec3 invgamma(vec3 color)
{
	return pow(color, vec3(1.0 / 2.2));
}

float A = 0.15;
float B = 0.50;
float C = 0.10;
float D = 0.20;
float E = 0.02;
float F = 0.30;
float W = 11.2;

vec3 uncharted2(vec3 color)
{
	 return ((color * (A * color + C * B) + D * E) / (color * (A * color + B) + D * F)) - E / F;
}

vec3 tonemap(vec3 color)
{
	return uncharted2(color);
}

// Calculation of the lighting contribution from an optional Image Based Light source.
// Precomputed Environment Maps are required uniform inputs and are computed as outlined in [1].
// See our README.md on Environment Maps [3] for additional discussion.
//#ifdef USE_IBL
vec3 getIBLContribution(pbr_s pbrInputs, vec3 n, vec3 reflection)
{
	float mipCount = 11.0; // resolution of 512x512
	float lod = (pbrInputs.perceptualRoughness * mipCount);
	// retrieve a scale and bias to F0. See [1], Figure 3
	vec3 brdf = gamma(texture2D(u_t2BRDF, vec2(pbrInputs.NdotV, 1.0 - pbrInputs.perceptualRoughness)).rgb);
	vec3 diffuseLight = gamma(textureCube(u_tcEnvironmentDiffuse, vec3(-n.x, n.y, -n.z)).rgb);

	vec3 specularLight = gamma(textureCubeLod(u_tcEnvironmentSpecular, reflection, lod).rgb);

	vec3 diffuse = diffuseLight * pbrInputs.diffuseColor;
	vec3 specular = specularLight * (pbrInputs.specularColor * brdf.x + brdf.y);

	// For presentation, this allows us to disable IBL terms
	//diffuse *= u_ScaleIBLAmbient.x;
	//specular *= u_ScaleIBLAmbient.y;

	return (diffuse + specular) * 4.0;
}
//#endif

vec3 diffuse(pbr_s pbrInputs)
{
	return pbrInputs.diffuseColor / M_PI;
}

// The following equation models the Fresnel reflectance term of the spec equation (aka F())
// Implementation of fresnel from [4], Equation 15
vec3 specularReflection(pbr_s pbrInputs)
{
	return pbrInputs.reflectance0 + (pbrInputs.reflectance90 - pbrInputs.reflectance0) * pow(clamp(1.0 - pbrInputs.VdotH, 0.0, 1.0), 5.0);
}

// This calculates the specular geometric attenuation (aka G()),
// where rougher material will reflect less light back to the viewer.
// This implementation is based on [1] Equation 4, and we adopt their modifications to
// alphaRoughness as input as originally proposed in [2].
float geometricOcclusion(pbr_s pbrInputs)
{
	float NdotL = pbrInputs.NdotL;
	float NdotV = pbrInputs.NdotV;
	float r = pbrInputs.alphaRoughness;

	float attenuationL = 2.0 * NdotL / (NdotL + sqrt(r * r + (1.0 - r * r) * (NdotL * NdotL)));
	float attenuationV = 2.0 * NdotV / (NdotV + sqrt(r * r + (1.0 - r * r) * (NdotV * NdotV)));
	return attenuationL * attenuationV;
}

// The following equation(s) model the distribution of microfacet normals across the area being drawn (aka D())
// Implementation from "Average Irregularity Representation of a Roughened Surface for Ray Reflection" by T. S. Trowbridge, and K. P. Reitz
// Follows the distribution function recommended in the SIGGRAPH 2013 course notes from EPIC Games [1], Equation 3.
float microfacetDistribution(pbr_s pbrInputs)
{
	float roughnessSq = pbrInputs.alphaRoughness * pbrInputs.alphaRoughness;
	float f = (pbrInputs.NdotH * roughnessSq - pbrInputs.NdotH) * pbrInputs.NdotH + 1.0;
	return roughnessSq / (M_PI * f * f);
}

void main()
{
	vec3 v3Light = normalize(vec3(-287.7438660, 204.4289093, -409.5520630));
	vec3 v3Normal = normalize(v_v3Normal);
	vec3 v3Direction = normalize(u_v4CameraPosition.xyz - v_v3Position);
	vec3 v3Half = normalize(v3Light + v3Direction);
	vec3 v3Reflect = -normalize(reflect(v3Direction, v3Normal));

	float NdotL = clamp(dot(v3Normal, v3Light), 0.001, 1.0);
	float NdotV = clamp(abs(dot(v3Normal, v3Direction)), 0.001, 1.0);
	float NdotH = clamp(dot(v3Normal, v3Half), 0.0, 1.0);
	float LdotH = clamp(dot(v3Light, v3Half), 0.0, 1.0);
	float VdotH = clamp(dot(v3Direction, v3Half), 0.0, 1.0);

	vec4 v4Base = u_v4Color;
	if (DEBUG_0.x >= 1.0) { // TODO : use #if
		v4Base *= texture2D(u_t2Color, v_v2Texcoord) * u_v4Color * DEBUG_0.x;
	}
	vec3 v3LinBase= gamma(v4Base.rgb);

	/*vec4 v4Env = u_v4Environment;
	if (DEBUG_0.y >= 1.0) { // TODO : use #if
		v4Env *= textureCube(u_tcEnvironment, v3Reflect);
	}
	vec4 v4LinEnv = gamma(v4Env.rgb);*/

	float rough = u_v4MetalRough.y;
	float metal = u_v4MetalRough.z;
	if (DEBUG_0.z >= 1.0) { // TODO : use #if
		vec4 v4MetalRough = texture2D(u_t2MetalRough, v_v2Texcoord);
		rough *= clamp(rough * v4MetalRough.y, c_MinRoughness, 1.0);
		metal *= v4MetalRough.z;
	}

	vec3 f0 = vec3(0.04);
	vec3 f1 = vec3(1.0) - f0;

	vec3 v3Diffuse = v3LinBase * f1 * (1.0 - metal);
	vec3 v3Specular = mix(f0, v3LinBase, metal);

	float reflectance = max(max(v3Specular.r, v3Specular.g), v3Specular.b);
	float reflectance90 = clamp(reflectance * 25.0, 0.0, 1.0);

	vec3 specularEnvironmentR0 = v3Specular;
	vec3 specularEnvironmentR90 = vec3(reflectance90);


	pbr_s pbrInputs = pbr_s(
		NdotL,
		NdotV,
		NdotH,
		LdotH,
		VdotH,
		rough,
		metal,
		specularEnvironmentR0,
		specularEnvironmentR90,
		rough * rough,
		v3Diffuse,
		v3Specular
	);


	vec3 F = specularReflection(pbrInputs);
	float G = geometricOcclusion(pbrInputs);
	float D = microfacetDistribution(pbrInputs);

	// Calculation of analytical lighting contribution
	vec3 diffuseContrib = (1.0 - F) * diffuse(pbrInputs);
	vec3 specContrib = F * G * D / (4.0 * NdotL * NdotV);

	vec3 color = NdotL * c_v3LightColor * (diffuseContrib + specContrib);

	// Calculate lighting contribution from image based lighting source (IBL)
//#ifdef USE_IBL
	color += getIBLContribution(pbrInputs, v3Normal, v3Reflect);
//#endif

/*#ifdef HAS_OCCLUSIONMAP
	float ao = texture2D(u_OcclusionSampler, u_v2Texcoord).r;
	color = mix(color, color * ao, u_OcclusionStrength);
#endif*/

/*#ifdef HAS_EMISSIVEMAP
	vec3 emissive = gamma(texture2D(u_EmissiveSampler, u_v3Texcoord).rgb) * u_EmissiveFactor;
	color += emissive;
#endif*/

	o_v4Color = vec4(invgamma(color), v4Base.a);// * REMOVE + vec4(invgamma(color), v4Base.a);
}

